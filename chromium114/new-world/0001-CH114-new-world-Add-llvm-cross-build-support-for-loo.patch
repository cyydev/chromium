From af3696896af02530dbc31dff50ec6540c07ba634 Mon Sep 17 00:00:00 2001
From: Wang Qing <wangqing-hf@loongson.cn>
Date: Fri, 1 Dec 2023 17:44:45 +0800
Subject: [PATCH] [CH114-new-world] Add llvm cross build support for
 loongarch64.

---
 base/system/sys_info.cc                       |   2 +
 build/config/linux/pkg-config.py              |   2 +
 build/config/posix/BUILD.gn                   |   2 +-
 build/config/sysroot.gni                      |   2 +
 build/cross-build.sh                          |  41 +
 chrome/installer/linux/common/apt.include     |   2 +
 chrome/installer/linux/common/rpm.include     |   2 +-
 chrome/installer/linux/debian/build.sh        |   2 +-
 chrome/installer/linux/rpm/build.sh           |   2 +-
 .../metrics/debug/metrics_internals_utils.cc  |   2 +
 components/variations/proto/study.proto       |   2 +
 .../service/variations_field_trial_creator.cc |   2 +
 sandbox/features.gni                          |   9 +-
 sandbox/linux/BUILD.gn                        |   1 +
 sandbox/linux/bpf_dsl/linux_syscall_ranges.h  |   7 +
 sandbox/linux/bpf_dsl/seccomp_macros.h        |  44 +
 .../bpf_dsl_seccomp_unittest.cc               |   5 +-
 .../seccomp_broker_process_unittest.cc        |  43 +-
 .../seccomp-bpf-helpers/baseline_policy.cc    |  10 +-
 .../baseline_policy_unittest.cc               |  12 +-
 .../seccomp-bpf-helpers/sigsys_handlers.cc    |   2 +
 .../syscall_parameters_restrictions.cc        |  10 +-
 .../linux/seccomp-bpf-helpers/syscall_sets.cc |  65 +-
 .../linux/seccomp-bpf-helpers/syscall_sets.h  |  16 +-
 sandbox/linux/seccomp-bpf/syscall.cc          |  32 +-
 sandbox/linux/seccomp-bpf/syscall_unittest.cc |   1 +
 sandbox/linux/services/credentials.cc         |   2 +-
 sandbox/linux/services/syscall_wrappers.cc    |  62 +-
 sandbox/linux/services/syscall_wrappers.h     |   6 +
 .../services/syscall_wrappers_unittest.cc     |   2 +
 sandbox/linux/syscall_broker/broker_client.cc |  15 +
 sandbox/linux/syscall_broker/broker_client.h  |   3 +
 sandbox/linux/syscall_broker/broker_command.h |   1 +
 sandbox/linux/syscall_broker/broker_host.cc   |  20 +-
 .../linux/syscall_broker/broker_process.cc    |  21 +-
 .../syscall_broker/broker_process_unittest.cc |  12 +-
 .../remote_syscall_arg_handler_unittest.cc    |   4 +
 .../syscall_broker/syscall_dispatcher.cc      |   7 +
 .../linux/syscall_broker/syscall_dispatcher.h |   3 +
 sandbox/linux/system_headers/linux_seccomp.h  |   9 +
 sandbox/linux/system_headers/linux_signal.h   |  10 +-
 sandbox/linux/system_headers/linux_stat.h     |  47 +-
 sandbox/linux/system_headers/linux_syscalls.h |   4 +
 .../loongarch64_linux_syscalls.h              | 851 ++++++++++++++++++
 .../policy/linux/bpf_broker_policy_linux.cc   |   6 +
 .../linux/bpf_cros_amd_gpu_policy_linux.cc    |   2 +-
 sandbox/policy/linux/bpf_gpu_policy_linux.cc  |   2 +-
 .../policy/linux/bpf_network_policy_linux.cc  |   2 +-
 sandbox/policy/linux/sandbox_linux.cc         |   4 +
 skia/BUILD.gn                                 |   2 +
 .../boringssl/src/include/openssl/base.h      |   6 +
 .../crashpad/compat/linux/sys/ptrace.h        |   4 +
 .../crashpad/crashpad/compat/non_win/winnt.h  |   1 +
 .../crashpad/minidump/minidump_context.h      |  30 +
 .../minidump/minidump_context_writer.cc       |  44 +
 .../minidump/minidump_context_writer.h        |  38 +
 .../minidump/minidump_context_writer_test.cc  |  15 +
 .../crashpad/minidump/minidump_extensions.h   |   1 +
 .../minidump/minidump_misc_info_writer.cc     |   2 +
 .../test/minidump_context_test_util.cc        |  46 +
 .../test/minidump_context_test_util.h         |   5 +
 .../crashpad/crashpad/snapshot/BUILD.gn       |   6 +-
 .../crashpad/snapshot/capture_memory.cc       |   4 +
 .../crashpad/snapshot/cpu_architecture.h      |   5 +-
 .../crashpad/crashpad/snapshot/cpu_context.cc |   5 +
 .../crashpad/crashpad/snapshot/cpu_context.h  |  10 +
 .../crashpad/snapshot/elf/elf_image_reader.cc |  14 +
 .../snapshot/elf/elf_symbol_table_reader.cc   |  27 +-
 .../snapshot/linux/cpu_context_linux.cc       |  24 +
 .../snapshot/linux/cpu_context_linux.h        |  24 +
 .../linux/exception_snapshot_linux.cc         |  77 +-
 .../snapshot/linux/exception_snapshot_linux.h |   2 +
 .../linux/exception_snapshot_linux_test.cc    |  42 +
 .../snapshot/linux/process_reader_linux.cc    |   2 +
 .../crashpad/snapshot/linux/signal_context.h  |  39 +-
 .../snapshot/linux/system_snapshot_linux.cc   |  11 +
 .../crashpad/snapshot/linux/test_modules.cc   |   4 +
 .../snapshot/linux/thread_snapshot_linux.cc   |   6 +
 .../snapshot/linux/thread_snapshot_linux.h    |   2 +
 .../minidump/minidump_context_converter.cc    |  22 +
 .../minidump/system_snapshot_minidump.cc      |   3 +-
 .../snapshot/test/test_cpu_context.cc         |  20 +
 .../crashpad/snapshot/test/test_cpu_context.h |   1 +
 .../crashpad/crashpad/test/linux/get_tls.cc   |   3 +
 .../crashpad/test/multiprocess_posix.cc       |   3 +-
 .../crashpad/crashpad/util/linux/ptracer.cc   |  48 +
 .../crashpad/util/linux/thread_info.h         |  19 +-
 .../crashpad/util/misc/capture_context.h      |   1 +
 .../util/misc/capture_context_linux.S         |  81 +-
 .../util/misc/capture_context_test.cc         |   2 +-
 .../misc/capture_context_test_util_linux.cc   |   6 +
 .../util/net/http_transport_libcurl.cc        |   2 +
 third_party/dawn/src/dawn/common/Platform.h   |   6 +-
 .../ffmpeg/chromium/scripts/build_ffmpeg.py   |  37 +-
 .../ffmpeg/chromium/scripts/copy_config.sh    |   2 +-
 .../ffmpeg/chromium/scripts/generate_gn.py    |   2 +-
 third_party/libvpx/BUILD.gn                   |   7 +-
 .../source/config/linux/loongarch/vp8_rtcd.h  |   2 +
 .../config/linux/loongarch/vpx_dsp_rtcd.h     |   2 +
 .../third_party/llvm-10.0/BUILD.gn            |   2 +
 100 files changed, 2071 insertions(+), 113 deletions(-)
 create mode 100755 build/cross-build.sh
 create mode 100644 sandbox/linux/system_headers/loongarch64_linux_syscalls.h

diff --git a/base/system/sys_info.cc b/base/system/sys_info.cc
index 9d52ed32666..b2d2931df09 100644
--- a/base/system/sys_info.cc
+++ b/base/system/sys_info.cc
@@ -178,6 +178,8 @@ std::string SysInfo::ProcessCPUArchitecture() {
   return "ARM";
 #elif defined(ARCH_CPU_ARM64)
   return "ARM_64";
+#elif defined(ARCH_CPU_LOONG64)
+  return "LOONGARCH_64";
 #else
   return std::string();
 #endif
diff --git a/build/config/linux/pkg-config.py b/build/config/linux/pkg-config.py
index 2e38c7ffbd1..70db7a02ae2 100755
--- a/build/config/linux/pkg-config.py
+++ b/build/config/linux/pkg-config.py
@@ -59,6 +59,8 @@ def SetConfigPath(options):
     sys.exit(1)
 
   libdir = sysroot + '/usr/' + options.system_libdir + '/pkgconfig'
+  if arch == 'loong64':
+    libdir += ':' + sysroot + '/usr/' + 'lib64' + '/pkgconfig'
   libdir += ':' + sysroot + '/usr/share/pkgconfig'
   os.environ['PKG_CONFIG_LIBDIR'] = libdir
   return libdir
diff --git a/build/config/posix/BUILD.gn b/build/config/posix/BUILD.gn
index 8312d7ecf62..1e83b3f8532 100644
--- a/build/config/posix/BUILD.gn
+++ b/build/config/posix/BUILD.gn
@@ -28,7 +28,7 @@ config("runtime_library") {
   if (!is_apple && sysroot != "" && current_os != "zos") {
     # Pass the sysroot to all C compiler variants, the assembler, and linker.
     sysroot_flags = [ "--sysroot=" + rebase_path(sysroot, root_build_dir) ]
-    if (is_linux || is_chromeos) {
+    if ((is_linux && current_cpu != "loong64") || is_chromeos) {
       # This is here so that all files get recompiled after a sysroot roll and
       # when turning the sysroot on or off. (defines are passed via the command
       # line, and build system rebuilds things when their commandline
diff --git a/build/config/sysroot.gni b/build/config/sysroot.gni
index dea380727e7..bcd36791956 100644
--- a/build/config/sysroot.gni
+++ b/build/config/sysroot.gni
@@ -48,6 +48,8 @@ if (sysroot == "") {
       sysroot = "$target_sysroot_dir/debian_bullseye_arm-sysroot"
     } else if (current_cpu == "arm64") {
       sysroot = "$target_sysroot_dir/debian_bullseye_arm64-sysroot"
+    } else if (current_cpu == "loong64") {
+      sysroot = "$target_sysroot_dir/debian_bullseye_loongarch64-sysroot"
     } else {
       assert(false, "No linux sysroot for cpu: $target_cpu")
     }
diff --git a/build/cross-build.sh b/build/cross-build.sh
new file mode 100755
index 00000000000..7c8b25c2fff
--- /dev/null
+++ b/build/cross-build.sh
@@ -0,0 +1,41 @@
+#! /bin/bash
+
+# Chromium build configuration description.
+# Author: Wang Qing <wangqing-hf@loongson.cn>
+
+export GN_CONFIG=(
+'google_api_key="AIzaSyDxKL42zsPjbke5O8_rPVpVrLrJ8aeE9rQ"'
+'google_default_client_id="595013732528-llk8trb03f0ldpqq6nprjp1s79596646.apps.googleusercontent.com"'
+'google_default_client_secret="5ntt6GbbkjnTVXx-MSxbmx5e"'
+'enable_hangout_services_extension=true'
+'enable_swiftshader=false'
+'angle_enable_swiftshader=false'
+'enable_swiftshader_vulkan=false'
+'dawn_use_swiftshader=false'
+'enable_widevine=false'
+'fatal_linker_warnings=false'
+'disable_fieldtrial_testing_config=true'
+'ffmpeg_branding="Chrome"'
+'proprietary_codecs=true'
+'is_debug=false'
+'use_gold=false'
+'is_clang=true'
+'clang_use_chrome_plugins=false'
+'link_pulseaudio=true'
+'symbol_level=0'
+'treat_warnings_as_errors=false'
+'use_pulseaudio=true'
+'use_gnome_keyring=false'
+'use_sysroot=true'
+'host_cpu = "x64"'
+'target_cpu = "loong64"'
+'v8_target_cpu = "loong64"'
+'enable_libaom=false'
+'use_system_libffi=true'
+'enable_rust=false')
+
+# Set build directory.
+root_build_dir="out/la64_cross"
+
+# generate root_build_dir to build.
+./buildtools/linux64/gn gen $root_build_dir --args="${GN_CONFIG[*]}"
diff --git a/chrome/installer/linux/common/apt.include b/chrome/installer/linux/common/apt.include
index 05c622864e7..7d91f03dce2 100644
--- a/chrome/installer/linux/common/apt.include
+++ b/chrome/installer/linux/common/apt.include
@@ -369,6 +369,8 @@ get_lib_dir() {
     LIBDIR=lib/mipsel-linux-gnu
   elif [ "$DEFAULT_ARCH" = "mips64el" ]; then
     LIBDIR=lib/mips64el-linux-gnuabi64
+  elif [ "$DEFAULT_ARCH" = "loongarch64" ]; then
+    LIBDIR=lib/loongarch64-linux-gnu
   else
     echo Unknown CPU Architecture: "$DEFAULT_ARCH"
     exit 1
diff --git a/chrome/installer/linux/common/rpm.include b/chrome/installer/linux/common/rpm.include
index 29438f42720..df9e2d3b69f 100644
--- a/chrome/installer/linux/common/rpm.include
+++ b/chrome/installer/linux/common/rpm.include
@@ -477,7 +477,7 @@ get_lib_dir() {
       [ "$DEFAULT_ARCH" = "mipsel" ]; then
     LIBDIR=lib
   elif [ "$DEFAULT_ARCH" = "x86_64" ] || [ "$DEFAULT_ARCH" = "aarch64" ] || \
-        [ "$DEFAULT_ARCH" = "mips64el" ]; then
+        [ "$DEFAULT_ARCH" = "mips64el" ] || [ "$DEFAULT_ARCH" = "loongarch64" ]; then
     LIBDIR=lib64
   else
     echo Unknown CPU Architecture: "$DEFAULT_ARCH"
diff --git a/chrome/installer/linux/debian/build.sh b/chrome/installer/linux/debian/build.sh
index 7cd40b9c37c..00ee185eb29 100755
--- a/chrome/installer/linux/debian/build.sh
+++ b/chrome/installer/linux/debian/build.sh
@@ -229,7 +229,7 @@ OUTPUTDIR="${PWD}"
 # call cleanup() on exit
 trap cleanup 0
 process_opts "$@"
-IS_OFFICIAL_BUILD=${IS_OFFICIAL_BUILD:=0}
+IS_OFFICIAL_BUILD=${IS_OFFICIAL_BUILD:=1}
 
 STAGEDIR="${OUTPUTDIR}/deb-staging-${CHANNEL}"
 mkdir -p "${STAGEDIR}"
diff --git a/chrome/installer/linux/rpm/build.sh b/chrome/installer/linux/rpm/build.sh
index 3053be4fbf8..c215dca23f5 100755
--- a/chrome/installer/linux/rpm/build.sh
+++ b/chrome/installer/linux/rpm/build.sh
@@ -212,7 +212,7 @@ OUTPUTDIR="${PWD}"
 trap cleanup 0
 process_opts "$@"
 export ARCHITECTURE="${ARCHITECTURE}"
-IS_OFFICIAL_BUILD=${IS_OFFICIAL_BUILD:=0}
+IS_OFFICIAL_BUILD=${IS_OFFICIAL_BUILD:=1}
 
 STAGEDIR="${OUTPUTDIR}/rpm-staging-${CHANNEL}"
 mkdir -p "${STAGEDIR}"
diff --git a/components/metrics/debug/metrics_internals_utils.cc b/components/metrics/debug/metrics_internals_utils.cc
index c32f2c79214..ece87612d85 100644
--- a/components/metrics/debug/metrics_internals_utils.cc
+++ b/components/metrics/debug/metrics_internals_utils.cc
@@ -62,6 +62,8 @@ std::string CpuArchitectureToString(
       return "x86_64";
     case variations::Study::ARM64:
       return "arm64";
+    case variations::Study::LOONGARCH64:
+      return "loongarch64";
     case variations::Study::X86_32:
       return "x86_32";
     case variations::Study::ARM32:
diff --git a/components/variations/proto/study.proto b/components/variations/proto/study.proto
index b1d497a8653..a087ec675e4 100644
--- a/components/variations/proto/study.proto
+++ b/components/variations/proto/study.proto
@@ -258,6 +258,8 @@ message Study {
     // A Mac-only value, indicating an x86-64 binary running on an arm64 host
     // via "Rosetta 2" binary translation.
     TRANSLATED_X86_64 = 4;
+
+    LOONGARCH64 = 5;
   }
 
   // Enum to pass as optional bool.
diff --git a/components/variations/service/variations_field_trial_creator.cc b/components/variations/service/variations_field_trial_creator.cc
index ac34e1377e1..9b94eef29b6 100644
--- a/components/variations/service/variations_field_trial_creator.cc
+++ b/components/variations/service/variations_field_trial_creator.cc
@@ -108,6 +108,8 @@ RestrictionPolicy GetVariationPolicyRestriction(PrefService* local_state) {
 
 Study::CpuArchitecture GetCurrentCpuArchitecture() {
   std::string process_arch = base::SysInfo::ProcessCPUArchitecture();
+  if (process_arch == "LOONGARCH_64")
+    return Study::LOONGARCH64;
   if (process_arch == "ARM_64")
     return Study::ARM64;
   if (process_arch == "ARM")
diff --git a/sandbox/features.gni b/sandbox/features.gni
index 8434144118b..abcec1425ec 100644
--- a/sandbox/features.gni
+++ b/sandbox/features.gni
@@ -6,10 +6,11 @@
 # currently.
 # Do not disable seccomp_bpf anywhere without talking to
 # security@chromium.org!
-use_seccomp_bpf = (is_linux || is_chromeos || is_android) &&
-                  (current_cpu == "x86" || current_cpu == "x64" ||
-                   current_cpu == "arm" || current_cpu == "arm64" ||
-                   current_cpu == "mipsel" || current_cpu == "mips64el")
+use_seccomp_bpf =
+    (is_linux || is_chromeos || is_android) &&
+    (current_cpu == "x86" || current_cpu == "x64" || current_cpu == "arm" ||
+     current_cpu == "arm64" || current_cpu == "mipsel" ||
+     current_cpu == "mips64el" || current_cpu == "loong64")
 
 # SSBD (Speculative Store Bypass Disable) is a mitigation of Spectre Variant 4.
 # As Spectre Variant 4 can be mitigated by site isolation, opt-out SSBD on site
diff --git a/sandbox/linux/BUILD.gn b/sandbox/linux/BUILD.gn
index ee57ed301c3..ae8240a6fd2 100644
--- a/sandbox/linux/BUILD.gn
+++ b/sandbox/linux/BUILD.gn
@@ -397,6 +397,7 @@ source_set("sandbox_services_headers") {
     "system_headers/linux_stat.h",
     "system_headers/linux_syscalls.h",
     "system_headers/linux_time.h",
+    "system_headers/loongarch64_linux_syscalls.h",
     "system_headers/mips64_linux_syscalls.h",
     "system_headers/mips_linux_syscalls.h",
     "system_headers/x86_32_linux_syscalls.h",
diff --git a/sandbox/linux/bpf_dsl/linux_syscall_ranges.h b/sandbox/linux/bpf_dsl/linux_syscall_ranges.h
index 1d0590b7dd6..5169ad3c82d 100644
--- a/sandbox/linux/bpf_dsl/linux_syscall_ranges.h
+++ b/sandbox/linux/bpf_dsl/linux_syscall_ranges.h
@@ -56,6 +56,13 @@
 #define MAX_PUBLIC_SYSCALL __NR_syscalls
 #define MAX_SYSCALL MAX_PUBLIC_SYSCALL
 
+#elif defined(__loongarch64)
+
+#include <asm-generic/unistd.h>
+#define MIN_SYSCALL 0u
+#define MAX_PUBLIC_SYSCALL __NR_syscalls
+#define MAX_SYSCALL MAX_PUBLIC_SYSCALL
+
 #else
 #error "Unsupported architecture"
 #endif
diff --git a/sandbox/linux/bpf_dsl/seccomp_macros.h b/sandbox/linux/bpf_dsl/seccomp_macros.h
index 87d5825aa3d..747dc298c6e 100644
--- a/sandbox/linux/bpf_dsl/seccomp_macros.h
+++ b/sandbox/linux/bpf_dsl/seccomp_macros.h
@@ -343,6 +343,50 @@ struct regs_struct {
 #define SECCOMP_PT_PARM4(_regs) (_regs).regs[3]
 #define SECCOMP_PT_PARM5(_regs) (_regs).regs[4]
 #define SECCOMP_PT_PARM6(_regs) (_regs).regs[5]
+
+#elif defined(__loongarch64)
+struct regs_struct {
+  uint64_t regs[32];
+  uint64_t pc;
+};
+
+typedef unsigned long int greg_t;
+
+#define SECCOMP_ARCH AUDIT_ARCH_LOONGARCH64
+
+#define SECCOMP_REG(_ctx, _reg) ((_ctx)->uc_mcontext.__gregs[_reg])
+
+#define SECCOMP_RESULT(_ctx) SECCOMP_REG(_ctx, 4)
+#define SECCOMP_SYSCALL(_ctx) SECCOMP_REG(_ctx, 11)
+#define SECCOMP_IP(_ctx) (_ctx)->uc_mcontext.__pc
+#define SECCOMP_PARM1(_ctx) SECCOMP_REG(_ctx, 4)
+#define SECCOMP_PARM2(_ctx) SECCOMP_REG(_ctx, 5)
+#define SECCOMP_PARM3(_ctx) SECCOMP_REG(_ctx, 6)
+#define SECCOMP_PARM4(_ctx) SECCOMP_REG(_ctx, 7)
+#define SECCOMP_PARM5(_ctx) SECCOMP_REG(_ctx, 8)
+#define SECCOMP_PARM6(_ctx) SECCOMP_REG(_ctx, 9)
+
+#define SECCOMP_NR_IDX (offsetof(struct arch_seccomp_data, nr))
+#define SECCOMP_ARCH_IDX (offsetof(struct arch_seccomp_data, arch))
+#define SECCOMP_IP_MSB_IDX \
+  (offsetof(struct arch_seccomp_data, instruction_pointer) + 4)
+#define SECCOMP_IP_LSB_IDX \
+  (offsetof(struct arch_seccomp_data, instruction_pointer) + 0)
+#define SECCOMP_ARG_MSB_IDX(nr) \
+  (offsetof(struct arch_seccomp_data, args) + 8 * (nr) + 4)
+#define SECCOMP_ARG_LSB_IDX(nr) \
+  (offsetof(struct arch_seccomp_data, args) + 8 * (nr) + 0)
+
+#define SECCOMP_PT_RESULT(_regs) (_regs).regs[4]
+#define SECCOMP_PT_SYSCALL(_regs) (_regs).regs[11]
+#define SECCOMP_PT_IP(_regs) (_regs).pc
+#define SECCOMP_PT_PARM1(_regs) (_regs).regs[4]
+#define SECCOMP_PT_PARM2(_regs) (_regs).regs[5]
+#define SECCOMP_PT_PARM3(_regs) (_regs).regs[6]
+#define SECCOMP_PT_PARM4(_regs) (_regs).regs[7]
+#define SECCOMP_PT_PARM5(_regs) (_regs).regs[8]
+#define SECCOMP_PT_PARM6(_regs) (_regs).regs[9]
+
 #else
 #error Unsupported target platform
 
diff --git a/sandbox/linux/integration_tests/bpf_dsl_seccomp_unittest.cc b/sandbox/linux/integration_tests/bpf_dsl_seccomp_unittest.cc
index 4a2721c7ce1..45bf9bf7947 100644
--- a/sandbox/linux/integration_tests/bpf_dsl_seccomp_unittest.cc
+++ b/sandbox/linux/integration_tests/bpf_dsl_seccomp_unittest.cc
@@ -1932,7 +1932,8 @@ BPF_TEST_C(SandboxBPF, PthreadBitMask, PthreadPolicyBitMask) {
 //
 // Depending on the architecture, this may modify regs, so the caller is
 // responsible for committing these changes using PTRACE_SETREGS.
-#if !defined(__arm__) && !defined(__aarch64__) && !defined(__mips__)
+#if !defined(__arm__) && !defined(__aarch64__) && !defined(__mips__) && \
+    !defined(__loongarch__)
 long SetSyscall(pid_t pid, regs_struct* regs, int syscall_number) {
 #if defined(__arm__)
   // On ARM, the syscall is changed using PTRACE_SET_SYSCALL.  We cannot use the
@@ -1972,7 +1973,7 @@ SANDBOX_TEST(SandboxBPF, DISABLE_ON_TSAN(SeccompRetTrace)) {
 // See https://code.google.com/p/chromium/issues/detail?id=383977
 #if defined(__arm__) || defined(__aarch64__)
   printf("This test is currently disabled on ARM32/64 due to a kernel bug.");
-#elif defined(__mips__)
+#elif defined(__mips__) || defined(__loongarch__)
   // TODO: Figure out how to support specificity of handling indirect syscalls
   //        in this test and enable it.
   printf("This test is currently disabled on MIPS.");
diff --git a/sandbox/linux/integration_tests/seccomp_broker_process_unittest.cc b/sandbox/linux/integration_tests/seccomp_broker_process_unittest.cc
index 967b50741f2..e6ff489f374 100644
--- a/sandbox/linux/integration_tests/seccomp_broker_process_unittest.cc
+++ b/sandbox/linux/integration_tests/seccomp_broker_process_unittest.cc
@@ -224,6 +224,7 @@ const int kFakeErrnoSentinel = 254;
 
 void ConvertKernelStatToLibcStat(default_stat_struct& in_stat,
                                  struct stat& out_stat) {
+#if !defined(ARCH_CPU_LOONG64)
   out_stat.st_dev = in_stat.st_dev;
   out_stat.st_ino = in_stat.st_ino;
   out_stat.st_mode = in_stat.st_mode;
@@ -240,6 +241,28 @@ void ConvertKernelStatToLibcStat(default_stat_struct& in_stat,
   out_stat.st_mtim.tv_nsec = in_stat.st_mtime_nsec_;
   out_stat.st_ctim.tv_sec = in_stat.st_ctime_;
   out_stat.st_ctim.tv_nsec = in_stat.st_ctime_nsec_;
+#else
+  out_stat.st_dev =
+      ((in_stat.stx_dev_minor & 0xff) | (in_stat.stx_dev_major << 8) |
+       ((in_stat.stx_dev_minor & ~0xff) << 12));
+  out_stat.st_rdev =
+      ((in_stat.stx_rdev_minor & 0xff) | (in_stat.stx_rdev_major << 8) |
+       ((in_stat.stx_rdev_minor & ~0xff) << 12));
+  out_stat.st_ino = in_stat.stx_ino;
+  out_stat.st_mode = in_stat.stx_mode;
+  out_stat.st_nlink = in_stat.stx_nlink;
+  out_stat.st_uid = in_stat.stx_uid;
+  out_stat.st_gid = in_stat.stx_gid;
+  out_stat.st_atim.tv_sec = in_stat.stx_atime.tv_sec;
+  out_stat.st_atim.tv_nsec = in_stat.stx_atime.tv_nsec;
+  out_stat.st_mtim.tv_sec = in_stat.stx_mtime.tv_sec;
+  out_stat.st_mtim.tv_nsec = in_stat.stx_mtime.tv_nsec;
+  out_stat.st_ctim.tv_sec = in_stat.stx_ctime.tv_sec;
+  out_stat.st_ctim.tv_nsec = in_stat.stx_ctime.tv_nsec;
+  out_stat.st_size = in_stat.stx_size;
+  out_stat.st_blocks = in_stat.stx_blocks;
+  out_stat.st_blksize = in_stat.stx_blksize;
+#endif
 }
 }  // namespace
 
@@ -408,6 +431,7 @@ class DirectSyscaller : public Syscaller {
 };
 #endif  // defined(DIRECT_SYSCALLER_ENABLED)
 
+#if !defined(ARCH_CPU_LOONG64)
 class LibcSyscaller : public Syscaller {
  public:
   ~LibcSyscaller() override = default;
@@ -476,6 +500,7 @@ class LibcSyscaller : public Syscaller {
     return ret;
   }
 };
+#endif
 
 enum class SyscallerType {
   IPCSyscaller = 0,
@@ -629,7 +654,12 @@ class BPFTesterBrokerDelegate : public BPFTesterDelegate {
 #endif
         break;
       case SyscallerType::LibcSyscaller:
+#if !defined(ARCH_CPU_LOONG64)
         syscaller_ = std::make_unique<LibcSyscaller>();
+#else
+        CHECK(false) << "Requested instantiation of LibcSyscaller on a "
+                        "platform that doesn't support it";
+#endif
         break;
       case SyscallerType::NoSyscaller:
         syscaller_ = nullptr;
@@ -663,16 +693,21 @@ const std::vector<BrokerTestConfiguration> broker_test_configs = {
     {"FastCheckInClient_DirectSyscaller", true, SyscallerType::DirectSyscaller,
      BrokerType::SIGNAL_BASED},
 #endif
+#if !defined(ARCH_CPU_LOONG64)
     {"FastCheckInClient_LibcSyscaller", true, SyscallerType::LibcSyscaller,
      BrokerType::SIGNAL_BASED},
+#endif
     {"NoFastCheckInClient_IPCSyscaller", false, SyscallerType::IPCSyscaller,
      BrokerType::SIGNAL_BASED},
 #if defined(DIRECT_SYSCALLER_ENABLED)
     {"NoFastCheckInClient_DirectSyscaller", false,
      SyscallerType::DirectSyscaller, BrokerType::SIGNAL_BASED},
 #endif
+#if !defined(ARCH_CPU_LOONG64)
     {"NoFastCheckInClient_LibcSyscaller", false, SyscallerType::LibcSyscaller,
-     BrokerType::SIGNAL_BASED}};
+     BrokerType::SIGNAL_BASED}
+#endif
+};
 }  // namespace
 
 void RunSingleBrokerTest(BrokerTestDelegate* test_delegate,
@@ -1394,6 +1429,7 @@ class StatNonexistentFileWithPermissionsDelegate final
   }
 
   void RunTestInSandboxedChild(Syscaller* syscaller) override {
+#if !defined(ARCH_CPU_LOONG64)
     BPF_ASSERT_EQ(-ENOENT, syscaller->Stat(nonesuch_name, follow_links, &sb_));
 
     // Gets denied all the way back to root since no create permission.
@@ -1417,6 +1453,7 @@ class StatNonexistentFileWithPermissionsDelegate final
                   syscaller->Stat(bad_leading_path5, follow_links, &sb_));
     BPF_ASSERT_EQ(-kFakeErrnoSentinel,
                   syscaller->Stat(bad_leading_path6, follow_links, &sb_));
+#endif
   }
 };
 
@@ -1446,6 +1483,7 @@ class StatNonexistentFileWithCreatePermissionsDelegate final
   }
 
   void RunTestInSandboxedChild(Syscaller* syscaller) override {
+#if !defined(ARCH_CPU_LOONG64)
     BPF_ASSERT_EQ(-ENOENT, syscaller->Stat(nonesuch_name, follow_links, &sb_));
 
     // Gets ENOENT all the way back to root since it has create permission.
@@ -1468,6 +1506,7 @@ class StatNonexistentFileWithCreatePermissionsDelegate final
                   syscaller->Stat(bad_leading_path5, follow_links, &sb_));
     BPF_ASSERT_EQ(-kFakeErrnoSentinel,
                   syscaller->Stat(bad_leading_path6, follow_links, &sb_));
+#endif
   }
 };
 
@@ -1496,6 +1535,7 @@ class StatFileWithPermissionsDelegate final : public StatFileDelegate {
   }
 
   void RunTestInSandboxedChild(Syscaller* syscaller) override {
+#if !defined(ARCH_CPU_LOONG64)
     BPF_ASSERT_EQ(0, syscaller->Stat(tempfile_name_, follow_links, &sb_));
 
     // Following fields may never be consistent but should be non-zero.
@@ -1518,6 +1558,7 @@ class StatFileWithPermissionsDelegate final : public StatFileDelegate {
     BPF_ASSERT_LT(1500000000u, static_cast<unsigned int>(sb_.st_atime));
     BPF_ASSERT_LT(1500000000u, static_cast<unsigned int>(sb_.st_mtime));
     BPF_ASSERT_LT(1500000000u, static_cast<unsigned int>(sb_.st_ctime));
+#endif
   }
 };
 
diff --git a/sandbox/linux/seccomp-bpf-helpers/baseline_policy.cc b/sandbox/linux/seccomp-bpf-helpers/baseline_policy.cc
index 7bde501115b..06cc98b1b46 100644
--- a/sandbox/linux/seccomp-bpf-helpers/baseline_policy.cc
+++ b/sandbox/linux/seccomp-bpf-helpers/baseline_policy.cc
@@ -193,7 +193,7 @@ ResultExpr EvaluateSyscallImpl(int fs_denied_errno,
     return RestrictFcntlCommands();
 #endif
 
-#if !defined(__aarch64__)
+#if !defined(__aarch64__) && !defined(__loongarch64)
   // fork() is never used as a system call (clone() is used instead), but we
   // have seen it in fallback code on Android.
   if (sysno == __NR_fork) {
@@ -255,7 +255,7 @@ ResultExpr EvaluateSyscallImpl(int fs_denied_errno,
   }
 
 #if defined(__i386__) || defined(__x86_64__) || defined(__mips__) || \
-    defined(__aarch64__)
+    defined(__aarch64__) || defined(__loongarch64)
   if (sysno == __NR_mmap)
     return RestrictMmapFlags();
 #endif
@@ -276,7 +276,7 @@ ResultExpr EvaluateSyscallImpl(int fs_denied_errno,
     return RestrictPrctl();
 
 #if defined(__x86_64__) || defined(__arm__) || defined(__mips__) || \
-    defined(__aarch64__)
+    defined(__aarch64__) || defined(__loongarch64)
   if (sysno == __NR_socketpair) {
     // Only allow AF_UNIX, PF_UNIX. Crash if anything else is seen.
     static_assert(AF_UNIX == PF_UNIX,
@@ -302,12 +302,14 @@ ResultExpr EvaluateSyscallImpl(int fs_denied_errno,
     return Allow();
   }
 
+#if !defined(__loongarch__)
   // The fstatat syscalls are file system syscalls, which will be denied below
   // with fs_denied_errno. However some allowed fstat syscalls are rewritten by
   // libc implementations to fstatat syscalls, and we need to rewrite them back.
   if (sysno == __NR_fstatat_default) {
     return RewriteFstatatSIGSYS(fs_denied_errno);
   }
+#endif
 
   // The statx syscall is a filesystem syscall, which will be denied below with
   // fs_denied_errno. However, on some platforms, glibc will default to statx
@@ -366,7 +368,7 @@ ResultExpr EvaluateSyscallImpl(int fs_denied_errno,
   // Allow creating pipes, but don't allow weird flags to pipe2().
   // O_NOTIFICATION_PIPE (== O_EXCL) can be used to create
   // "notification pipes", which are rarely used.
-#if !defined(__aarch64__)
+#if !defined(__aarch64__) && !defined(__loongarch64)
   if (sysno == __NR_pipe) {
     return Allow();
   }
diff --git a/sandbox/linux/seccomp-bpf-helpers/baseline_policy_unittest.cc b/sandbox/linux/seccomp-bpf-helpers/baseline_policy_unittest.cc
index 2001e5d27b4..8b18d110bda 100644
--- a/sandbox/linux/seccomp-bpf-helpers/baseline_policy_unittest.cc
+++ b/sandbox/linux/seccomp-bpf-helpers/baseline_policy_unittest.cc
@@ -54,9 +54,12 @@ namespace {
 
 // This also tests that read(), write(), fstat(), and fstatat(.., "", ..,
 // AT_EMPTY_PATH) are allowed.
+// Use statx instead of stat,lstat and fstatat on loongarch64 architecture,
+// So not test fstat(), and fstatat on loongarch64.
 void TestPipeOrSocketPair(base::ScopedFD read_end, base::ScopedFD write_end) {
   BPF_ASSERT_LE(0, read_end.get());
   BPF_ASSERT_LE(0, write_end.get());
+#if !defined(__loongarch64)
   struct stat stat_buf;
   int sys_ret = fstat(read_end.get(), &stat_buf);
   BPF_ASSERT_EQ(0, sys_ret);
@@ -75,6 +78,7 @@ void TestPipeOrSocketPair(base::ScopedFD read_end, base::ScopedFD write_end) {
   sys_ret = fstatat(read_end.get(), "", &stat_buf, 0);
   BPF_ASSERT_EQ(sys_ret, -1);
   BPF_ASSERT_EQ(EPERM, errno);
+#endif
 
   const ssize_t kTestTransferSize = 4;
   static const char kTestString[kTestTransferSize] = {'T', 'E', 'S', 'T'};
@@ -247,7 +251,8 @@ BPF_TEST_C(BaselinePolicy, GetRandom, BaselinePolicy) {
 }
 
 // Not all architectures can restrict the domain for socketpair().
-#if defined(__x86_64__) || defined(__arm__) || defined(__aarch64__)
+#if defined(__x86_64__) || defined(__arm__) || defined(__aarch64__) || \
+    defined(__loongarch64)
 BPF_DEATH_TEST_C(BaselinePolicy,
                  SocketpairWrongDomain,
                  DEATH_SEGV_MESSAGE(GetErrorMessageContentForTests()),
@@ -256,7 +261,8 @@ BPF_DEATH_TEST_C(BaselinePolicy,
   std::ignore = socketpair(AF_INET, SOCK_STREAM, 0, sv);
   _exit(1);
 }
-#endif  // defined(__x86_64__) || defined(__arm__) || defined(__aarch64__)
+#endif  // defined(__x86_64__) || defined(__arm__) || defined(__aarch64__) ||
+        // defined(__loongarch64)
 
 BPF_TEST_C(BaselinePolicy, EPERM_open, BaselinePolicy) {
   errno = 0;
@@ -320,7 +326,7 @@ TEST_BASELINE_SIGSYS(__NR_sysinfo)
 TEST_BASELINE_SIGSYS(__NR_syslog)
 TEST_BASELINE_SIGSYS(__NR_timer_create)
 
-#if !defined(__aarch64__)
+#if !defined(__aarch64__) && !defined(__loongarch64)
 TEST_BASELINE_SIGSYS(__NR_inotify_init)
 TEST_BASELINE_SIGSYS(__NR_vserver)
 #endif
diff --git a/sandbox/linux/seccomp-bpf-helpers/sigsys_handlers.cc b/sandbox/linux/seccomp-bpf-helpers/sigsys_handlers.cc
index 790b65c5870..56a620b0026 100644
--- a/sandbox/linux/seccomp-bpf-helpers/sigsys_handlers.cc
+++ b/sandbox/linux/seccomp-bpf-helpers/sigsys_handlers.cc
@@ -431,6 +431,7 @@ intptr_t SIGSYSSchedHandler(const struct arch_seccomp_data& args,
 
 intptr_t SIGSYSFstatatHandler(const struct arch_seccomp_data& args,
                               void* fs_denied_errno) {
+#if !defined(__loongarch__)
   if (args.nr == __NR_fstatat_default) {
     if (*reinterpret_cast<const char*>(args.args[1]) == '\0' &&
         args.args[3] == static_cast<uint64_t>(AT_EMPTY_PATH)) {
@@ -439,6 +440,7 @@ intptr_t SIGSYSFstatatHandler(const struct arch_seccomp_data& args,
     }
     return -reinterpret_cast<intptr_t>(fs_denied_errno);
   }
+#endif
 
   CrashSIGSYS_Handler(args, fs_denied_errno);
 
diff --git a/sandbox/linux/seccomp-bpf-helpers/syscall_parameters_restrictions.cc b/sandbox/linux/seccomp-bpf-helpers/syscall_parameters_restrictions.cc
index cdce353e752..bed2c27d56e 100644
--- a/sandbox/linux/seccomp-bpf-helpers/syscall_parameters_restrictions.cc
+++ b/sandbox/linux/seccomp-bpf-helpers/syscall_parameters_restrictions.cc
@@ -35,8 +35,8 @@
 #include "sandbox/linux/system_headers/linux_syscalls.h"
 #include "sandbox/linux/system_headers/linux_time.h"
 
-#if (BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS_LACROS)) && \
-    !defined(__arm__) && !defined(__aarch64__) &&             \
+#if (BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS_LACROS)) &&                \
+    !defined(__arm__) && !defined(__aarch64__) && !defined(__loongarch__) && \
     !defined(PTRACE_GET_THREAD_AREA)
 // Also include asm/ptrace-abi.h since ptrace.h in older libc (for instance
 // the one in Ubuntu 16.04 LTS) is missing PTRACE_GET_THREAD_AREA.
@@ -444,8 +444,10 @@ ResultExpr RestrictPtrace() {
   return Switch(request)
       .Cases({
 #if !defined(__aarch64__)
-                 PTRACE_GETREGS, PTRACE_GETFPREGS, PTRACE_GET_THREAD_AREA,
-                 PTRACE_GETREGSET,
+                 PTRACE_GETREGS, PTRACE_GETFPREGS, PTRACE_GETREGSET,
+#if !defined(__loongarch64)
+                 PTRACE_GET_THREAD_AREA,
+#endif
 #endif
 #if defined(__arm__)
                  PTRACE_GETVFPREGS,
diff --git a/sandbox/linux/seccomp-bpf-helpers/syscall_sets.cc b/sandbox/linux/seccomp-bpf-helpers/syscall_sets.cc
index 27ea264070d..ad02b11e069 100644
--- a/sandbox/linux/seccomp-bpf-helpers/syscall_sets.cc
+++ b/sandbox/linux/seccomp-bpf-helpers/syscall_sets.cc
@@ -103,7 +103,7 @@ bool SyscallSets::IsUmask(int sysno) {
 // Both EPERM and ENOENT are valid errno unless otherwise noted in comment.
 bool SyscallSets::IsFileSystem(int sysno) {
   switch (sysno) {
-#if !defined(__aarch64__)
+#if !defined(__aarch64__) && !defined(__loongarch64)
     case __NR_access:  // EPERM not a valid errno.
     case __NR_chmod:
     case __NR_chown:
@@ -133,7 +133,9 @@ bool SyscallSets::IsFileSystem(int sysno) {
 
     case __NR_execve:
     case __NR_faccessat:  // EPERM not a valid errno.
+#if !defined(__loongarch__)
     case __NR_faccessat2:
+#endif
     case __NR_fchmodat:
     case __NR_fchownat:  // Should be called chownat ?
 #if defined(__x86_64__) || defined(__aarch64__)
@@ -211,7 +213,12 @@ bool SyscallSets::IsTruncate(int sysno) {
 
 bool SyscallSets::IsAllowedFileSystemAccessViaFd(int sysno) {
   switch (sysno) {
+#if !defined(__loongarch__)
     case __NR_fstat:
+#endif
+#if defined(__loongarch__)
+    case __NR_statx:
+#endif
     case __NR_ftruncate:
 #if defined(__i386__) || defined(__arm__) || \
     (defined(ARCH_CPU_MIPS_FAMILY) && defined(ARCH_CPU_32_BITS))
@@ -241,7 +248,7 @@ bool SyscallSets::IsAllowedFileSystemAccessViaFd(int sysno) {
     case __NR_oldfstat:
 #endif
 #if defined(__i386__) || defined(__x86_64__) || defined(__mips__) || \
-    defined(__aarch64__)
+    defined(__aarch64__) || defined(__loongarch__)
     case __NR_sync_file_range:  // EPERM not a valid errno.
 #elif defined(__arm__)
     case __NR_arm_sync_file_range:  // EPERM not a valid errno.
@@ -260,7 +267,7 @@ bool SyscallSets::IsDeniedFileSystemAccessViaFd(int sysno) {
 #if defined(__i386__) || defined(__arm__)
     case __NR_fchown32:
 #endif
-#if !defined(__aarch64__)
+#if !defined(__aarch64__) && !defined(__loongarch64)
     case __NR_getdents:    // EPERM not a valid errno.
 #endif
     case __NR_getdents64:  // EPERM not a valid errno.
@@ -339,7 +346,7 @@ bool SyscallSets::IsProcessPrivilegeChange(int sysno) {
 bool SyscallSets::IsProcessGroupOrSession(int sysno) {
   switch (sysno) {
     case __NR_setpgid:
-#if !defined(__aarch64__)
+#if !defined(__aarch64__) && !defined(__loongarch64)
     case __NR_getpgrp:
 #endif
     case __NR_setsid:
@@ -373,7 +380,7 @@ bool SyscallSets::IsAllowedSignalHandling(int sysno) {
     case __NR_rt_sigqueueinfo:
     case __NR_rt_sigsuspend:
     case __NR_rt_tgsigqueueinfo:
-#if !defined(__aarch64__)
+#if !defined(__aarch64__) && !defined(__loongarch64)
     case __NR_signalfd:
 #endif
     case __NR_signalfd4:
@@ -397,12 +404,12 @@ bool SyscallSets::IsAllowedOperationOnFd(int sysno) {
   switch (sysno) {
     case __NR_close:
     case __NR_dup:
-#if !defined(__aarch64__)
+#if !defined(__aarch64__) && !defined(__loongarch64)
     case __NR_dup2:
 #endif
     case __NR_dup3:
 #if defined(__x86_64__) || defined(__arm__) || defined(__mips__) || \
-    defined(__aarch64__)
+    defined(__aarch64__) || defined(__loongarch64)
     case __NR_shutdown:
 #endif
       return true;
@@ -441,7 +448,7 @@ bool SyscallSets::IsAllowedProcessStartOrDeath(int sysno) {
       return true;
     case __NR_clone:  // Should be parameter-restricted.
     case __NR_setns:  // Privileged.
-#if !defined(__aarch64__)
+#if !defined(__aarch64__) && !defined(__loongarch64)
     case __NR_fork:
 #endif
 #if defined(__i386__) || defined(__x86_64__)
@@ -452,7 +459,7 @@ bool SyscallSets::IsAllowedProcessStartOrDeath(int sysno) {
 #endif
     case __NR_set_tid_address:
     case __NR_unshare:
-#if !defined(__mips__) && !defined(__aarch64__)
+#if !defined(__mips__) && !defined(__aarch64__) && !defined(__loongarch__)
     case __NR_vfork:
 #endif
     default:
@@ -477,7 +484,7 @@ bool SyscallSets::IsAllowedFutex(int sysno) {
 
 bool SyscallSets::IsAllowedEpoll(int sysno) {
   switch (sysno) {
-#if !defined(__aarch64__)
+#if !defined(__aarch64__) && !defined(__loongarch64)
     case __NR_epoll_create:
     case __NR_epoll_wait:
 #endif
@@ -499,7 +506,7 @@ bool SyscallSets::IsAllowedEpoll(int sysno) {
 bool SyscallSets::IsDeniedGetOrModifySocket(int sysno) {
   switch (sysno) {
 #if defined(__x86_64__) || defined(__arm__) || defined(__mips__) || \
-    defined(__aarch64__)
+    defined(__aarch64__) || defined(__loongarch__)
     case __NR_accept:
     case __NR_accept4:
     case __NR_bind:
@@ -528,7 +535,8 @@ bool SyscallSets::IsSocketCall(int sysno) {
 }
 #endif
 
-#if defined(__x86_64__) || defined(__arm__) || defined(__mips__)
+#if defined(__x86_64__) || defined(__arm__) || defined(__mips__) || \
+    defined(__loongarch__)
 bool SyscallSets::IsNetworkSocketInformation(int sysno) {
   switch (sysno) {
     case __NR_getpeername:
@@ -553,7 +561,7 @@ bool SyscallSets::IsAllowedAddressSpaceAccess(int sysno) {
     case __NR_mincore:
     case __NR_mlockall:
 #if defined(__i386__) || defined(__x86_64__) || defined(__mips__) || \
-    defined(__aarch64__)
+    defined(__aarch64__) || defined(__loongarch__)
     case __NR_mmap:
 #endif
 #if defined(__i386__) || defined(__arm__) || \
@@ -586,7 +594,7 @@ bool SyscallSets::IsAllowedGeneralIo(int sysno) {
     (defined(ARCH_CPU_MIPS_FAMILY) && defined(ARCH_CPU_32_BITS))
     case __NR__llseek:
 #endif
-#if !defined(__aarch64__)
+#if !defined(__aarch64__) && !defined(__loongarch64)
     case __NR_poll:
 #endif
     case __NR_ppoll:
@@ -607,7 +615,7 @@ bool SyscallSets::IsAllowedGeneralIo(int sysno) {
     case __NR_recv:
 #endif
 #if defined(__x86_64__) || defined(__arm__) || defined(__mips__) || \
-    defined(__aarch64__)
+    defined(__aarch64__) || defined(__loongarch__)
     case __NR_recvfrom:  // Could specify source.
     case __NR_recvmsg:   // Could specify source.
 #endif
@@ -622,7 +630,7 @@ bool SyscallSets::IsAllowedGeneralIo(int sysno) {
     case __NR_send:
 #endif
 #if defined(__x86_64__) || defined(__arm__) || defined(__mips__) || \
-    defined(__aarch64__)
+    defined(__aarch64__) || defined(__loongarch__)
     case __NR_sendmsg:  // Could specify destination.
     case __NR_sendto:   // Could specify destination.
 #endif
@@ -671,7 +679,7 @@ bool SyscallSets::IsSeccomp(int sysno) {
 bool SyscallSets::IsAllowedBasicScheduler(int sysno) {
   switch (sysno) {
     case __NR_sched_yield:
-#if !defined(__aarch64__)
+#if !defined(__aarch64__) && !defined(__loongarch64)
     case __NR_pause:
 #endif
     case __NR_nanosleep:
@@ -755,7 +763,7 @@ bool SyscallSets::IsNuma(int sysno) {
     case __NR_getcpu:
     case __NR_mbind:
 #if defined(__i386__) || defined(__x86_64__) || defined(__mips__) || \
-    defined(__aarch64__)
+    defined(__aarch64__) || defined(__loongarch__)
     case __NR_migrate_pages:
 #endif
     case __NR_move_pages:
@@ -790,7 +798,7 @@ bool SyscallSets::IsGlobalProcessEnvironment(int sysno) {
   switch (sysno) {
     case __NR_acct:  // Privileged.
 #if defined(__i386__) || defined(__x86_64__) || defined(__mips__) || \
-    defined(__aarch64__)
+    defined(__aarch64__) || defined(__loongarch__)
     case __NR_getrlimit:
 #endif
 #if defined(__i386__) || defined(__arm__)
@@ -825,7 +833,7 @@ bool SyscallSets::IsDebug(int sysno) {
 
 bool SyscallSets::IsGlobalSystemStatus(int sysno) {
   switch (sysno) {
-#if !defined(__aarch64__)
+#if !defined(__aarch64__) && !defined(__loongarch64)
     case __NR__sysctl:
     case __NR_sysfs:
 #endif
@@ -843,7 +851,7 @@ bool SyscallSets::IsGlobalSystemStatus(int sysno) {
 
 bool SyscallSets::IsEventFd(int sysno) {
   switch (sysno) {
-#if !defined(__aarch64__)
+#if !defined(__aarch64__) && !defined(__loongarch64)
     case __NR_eventfd:
 #endif
     case __NR_eventfd2:
@@ -895,7 +903,8 @@ bool SyscallSets::IsKeyManagement(int sysno) {
 }
 
 #if defined(__x86_64__) || defined(__arm__) || defined(__aarch64__) || \
-    (defined(ARCH_CPU_MIPS_FAMILY) && defined(ARCH_CPU_64_BITS))
+    (defined(ARCH_CPU_MIPS_FAMILY) && defined(ARCH_CPU_64_BITS)) ||    \
+    defined(__loongarch64)
 bool SyscallSets::IsSystemVSemaphores(int sysno) {
   switch (sysno) {
     case __NR_semctl:
@@ -914,7 +923,7 @@ bool SyscallSets::IsSystemVSemaphores(int sysno) {
 #endif
 
 #if defined(__i386__) || defined(__x86_64__) || defined(__arm__) || \
-    defined(__aarch64__) ||                                         \
+    defined(__aarch64__) || defined(__loongarch64) ||               \
     (defined(ARCH_CPU_MIPS_FAMILY) && defined(ARCH_CPU_64_BITS))
 // These give a lot of ambient authority and bypass the setuid sandbox.
 bool SyscallSets::IsSystemVSharedMemory(int sysno) {
@@ -931,7 +940,8 @@ bool SyscallSets::IsSystemVSharedMemory(int sysno) {
 #endif
 
 #if defined(__x86_64__) || defined(__arm__) || defined(__aarch64__) || \
-    (defined(ARCH_CPU_MIPS_FAMILY) && defined(ARCH_CPU_64_BITS))
+    (defined(ARCH_CPU_MIPS_FAMILY) && defined(ARCH_CPU_64_BITS)) ||    \
+    defined(__loongarch64)
 bool SyscallSets::IsSystemVMessageQueue(int sysno) {
   switch (sysno) {
     case __NR_msgctl:
@@ -962,7 +972,8 @@ bool SyscallSets::IsSystemVIpc(int sysno) {
 
 bool SyscallSets::IsAnySystemV(int sysno) {
 #if defined(__x86_64__) || defined(__arm__) || defined(__aarch64__) || \
-    (defined(ARCH_CPU_MIPS_FAMILY) && defined(ARCH_CPU_64_BITS))
+    (defined(ARCH_CPU_MIPS_FAMILY) && defined(ARCH_CPU_64_BITS)) ||    \
+    defined(__loongarch64)
   return IsSystemVMessageQueue(sysno) || IsSystemVSemaphores(sysno) ||
          IsSystemVSharedMemory(sysno);
 #elif defined(__i386__) || \
@@ -999,7 +1010,7 @@ bool SyscallSets::IsAdvancedScheduler(int sysno) {
 bool SyscallSets::IsInotify(int sysno) {
   switch (sysno) {
     case __NR_inotify_add_watch:
-#if !defined(__aarch64__)
+#if !defined(__aarch64__) && !defined(__loongarch64)
     case __NR_inotify_init:
 #endif
     case __NR_inotify_init1:
@@ -1137,7 +1148,7 @@ bool SyscallSets::IsMisc(int sysno) {
 #if defined(__x86_64__)
     case __NR_tuxcall:
 #endif
-#if !defined(__aarch64__)
+#if !defined(__aarch64__) && !defined(__loongarch64)
     case __NR_vserver:
 #endif
       return true;
diff --git a/sandbox/linux/seccomp-bpf-helpers/syscall_sets.h b/sandbox/linux/seccomp-bpf-helpers/syscall_sets.h
index 9be7b03ec43..2fa9ed4d8b0 100644
--- a/sandbox/linux/seccomp-bpf-helpers/syscall_sets.h
+++ b/sandbox/linux/seccomp-bpf-helpers/syscall_sets.h
@@ -52,7 +52,7 @@ class SANDBOX_EXPORT SyscallSets {
 #endif
 
 #if defined(__x86_64__) || defined(__arm__) || defined(__mips__) || \
-    defined(__aarch64__)
+    defined(__aarch64__) || defined(__loongarch64)
   static bool IsNetworkSocketInformation(int sysno);
 #endif
 
@@ -79,23 +79,27 @@ class SANDBOX_EXPORT SyscallSets {
   static bool IsAsyncIo(int sysno);
   static bool IsKeyManagement(int sysno);
 #if defined(__x86_64__) || defined(__arm__) || defined(__aarch64__) || \
-    (defined(ARCH_CPU_MIPS_FAMILY) && defined(ARCH_CPU_64_BITS))
+    (defined(ARCH_CPU_MIPS_FAMILY) && defined(ARCH_CPU_64_BITS)) ||    \
+    defined(__loongarch64)
   static bool IsSystemVSemaphores(int sysno);
 #endif
 #if defined(__i386__) || defined(__x86_64__) || defined(__arm__) || \
     defined(__aarch64__) ||                                         \
-    (defined(ARCH_CPU_MIPS_FAMILY) && defined(ARCH_CPU_64_BITS))
+    (defined(ARCH_CPU_MIPS_FAMILY) && defined(ARCH_CPU_64_BITS)) || \
+    defined(__loongarch64)
   // These give a lot of ambient authority and bypass the setuid sandbox.
   static bool IsSystemVSharedMemory(int sysno);
 #endif
 
 #if defined(__x86_64__) || defined(__arm__) || defined(__aarch64__) || \
-    (defined(ARCH_CPU_MIPS_FAMILY) && defined(ARCH_CPU_64_BITS))
+    (defined(ARCH_CPU_MIPS_FAMILY) && defined(ARCH_CPU_64_BITS)) ||    \
+    defined(__loongarch64)
   static bool IsSystemVMessageQueue(int sysno);
 #endif
 
-#if defined(__i386__) || \
-    (defined(ARCH_CPU_MIPS_FAMILY) && defined(ARCH_CPU_32_BITS))
+#if defined(__i386__) ||                                            \
+    (defined(ARCH_CPU_MIPS_FAMILY) && defined(ARCH_CPU_32_BITS)) || \
+    defined(__looongarch__)
   // Big system V multiplexing system call.
   static bool IsSystemVIpc(int sysno);
 #endif
diff --git a/sandbox/linux/seccomp-bpf/syscall.cc b/sandbox/linux/seccomp-bpf/syscall.cc
index 02cbb047c15..3e570db920f 100644
--- a/sandbox/linux/seccomp-bpf/syscall.cc
+++ b/sandbox/linux/seccomp-bpf/syscall.cc
@@ -18,7 +18,7 @@ namespace sandbox {
 namespace {
 
 #if defined(ARCH_CPU_X86_FAMILY) || defined(ARCH_CPU_ARM_FAMILY) || \
-    defined(ARCH_CPU_MIPS_FAMILY)
+    defined(ARCH_CPU_MIPS_FAMILY) || defined(ARCH_CPU_LOONG_FAMILY)
 // Number that's not currently used by any Linux kernel ABIs.
 const int kInvalidSyscallNumber = 0x351d3;
 #else
@@ -308,6 +308,25 @@ asm(// We need to be able to tell the kernel exactly where we made a
     "2:ret\n"
     ".cfi_endproc\n"
     ".size SyscallAsm, .-SyscallAsm\n"
+#elif defined(__loongarch64)
+    ".text\n"
+    ".global SyscallAsm\n"
+    ".type SyscallAsm, %function\n"
+    "SyscallAsm:\n"
+    "bge $a0, $zero, 1f\n"
+    "la $a0, 2f\n"
+    "b 2f\n"
+    "1:ld.d $a5, $a6, 40\n"
+    "ld.d $a4, $a6, 32\n"
+    "ld.d $a3, $a6, 24\n"
+    "ld.d $a2, $a6, 16\n"
+    "ld.d $a1, $a6, 8\n"
+    "move $a7, $a0\n"
+    "ld.d $a0, $a6, 0\n"
+    // Enter the kernel
+    "syscall 0\n"
+    "2:jirl $zero, $ra, 0\n"
+    ".size SyscallAsm, .-SyscallAsm\n"
 #endif
     );  // asm
 
@@ -425,6 +444,17 @@ intptr_t Syscall::Call(int nr,
     ret = inout;
   }
 
+#elif defined(__loongarch64)
+  intptr_t ret;
+  {
+    register intptr_t inout __asm__("$r4") = nr;
+    register const intptr_t* data __asm__("$r10") = args;
+    asm volatile("bl SyscallAsm\n"
+                 : "=r"(inout)
+                 : "0"(inout), "r"(data)
+                 : "memory", "$r5", "$r6", "$r7", "$r8", "$r9", "$r11", "$r1");
+    ret = inout;
+  }
 #else
 #error "Unimplemented architecture"
 #endif
diff --git a/sandbox/linux/seccomp-bpf/syscall_unittest.cc b/sandbox/linux/seccomp-bpf/syscall_unittest.cc
index 9667feaae87..902d6b32016 100644
--- a/sandbox/linux/seccomp-bpf/syscall_unittest.cc
+++ b/sandbox/linux/seccomp-bpf/syscall_unittest.cc
@@ -65,6 +65,7 @@ TEST(Syscall, WellKnownEntryPoint) {
   EXPECT_EQ(0x0cu, (((uint32_t*)Syscall::Call(-1))[-1]) & 0x0000FFFF);
 #elif defined(__aarch64__)
   EXPECT_EQ(0xD4000001u, ((uint32_t*)Syscall::Call(-1))[-1]);  // SVC 0
+#elif defined(__loongarch64)
 #else
 #warning Incomplete test case; need port for target platform
 #endif
diff --git a/sandbox/linux/services/credentials.cc b/sandbox/linux/services/credentials.cc
index e284c59d239..5257bddc7cd 100644
--- a/sandbox/linux/services/credentials.cc
+++ b/sandbox/linux/services/credentials.cc
@@ -80,7 +80,7 @@ bool ChrootToSafeEmptyDir() {
   pid_t pid = -1;
   alignas(16) char stack_buf[PTHREAD_STACK_MIN];
 #if defined(ARCH_CPU_X86_FAMILY) || defined(ARCH_CPU_ARM_FAMILY) || \
-    defined(ARCH_CPU_MIPS_FAMILY)
+    defined(ARCH_CPU_MIPS_FAMILY) || defined(ARCH_CPU_LOONG_FAMILY)
   // The stack grows downward.
   void* stack = stack_buf + sizeof(stack_buf);
 #else
diff --git a/sandbox/linux/services/syscall_wrappers.cc b/sandbox/linux/services/syscall_wrappers.cc
index 7650e983b38..71bd5a5b210 100644
--- a/sandbox/linux/services/syscall_wrappers.cc
+++ b/sandbox/linux/services/syscall_wrappers.cc
@@ -58,7 +58,7 @@ long sys_clone(unsigned long flags,
   if (ctid) MSAN_UNPOISON(ctid, sizeof(*ctid));
   // See kernel/fork.c in Linux. There is different ordering of sys_clone
   // parameters depending on CONFIG_CLONE_BACKWARDS* configuration options.
-#if defined(ARCH_CPU_X86_64)
+#if defined(ARCH_CPU_X86_64) || defined(ARCH_CPU_LOONG64)
   return syscall(__NR_clone, flags, child_stack, ptid, ctid, tls);
 #elif defined(ARCH_CPU_X86) || defined(ARCH_CPU_ARM_FAMILY) || \
     defined(ARCH_CPU_MIPS_FAMILY)
@@ -163,11 +163,58 @@ int sys_sigaction(int signum,
   return sigaction(signum, act, oldact);
 }
 
+void statx_to_stat(struct kernel_stat* to, struct kernel_statx* from) {
+  memset(to, 0, sizeof(struct kernel_stat));
+  to->st_dev = ((from->stx_dev_minor & 0xff) | (from->stx_dev_major << 8) |
+                ((from->stx_dev_minor & ~0xff) << 12));
+  to->st_rdev = ((from->stx_rdev_minor & 0xff) | (from->stx_rdev_major << 8) |
+                 ((from->stx_rdev_minor & ~0xff) << 12));
+  to->st_ino = from->stx_ino;
+  to->st_mode = from->stx_mode;
+  to->st_nlink = from->stx_nlink;
+  to->st_uid = from->stx_uid;
+  to->st_gid = from->stx_gid;
+  to->st_atime_ = from->stx_atime.tv_sec;
+  to->st_atime_nsec_ = from->stx_atime.tv_nsec;
+  to->st_mtime_ = from->stx_mtime.tv_sec;
+  to->st_mtime_nsec_ = from->stx_mtime.tv_nsec;
+  to->st_ctime_ = from->stx_ctime.tv_sec;
+  to->st_ctime_nsec_ = from->stx_ctime.tv_nsec;
+  to->st_size = from->stx_size;
+  to->st_blocks = from->stx_blocks;
+  to->st_blksize = from->stx_blksize;
+}
+
+int sys_statx(int fd,
+              const char* path,
+              int flags,
+              unsigned int mask,
+              struct kernel_statx* statx_buf) {
+#if defined(__NR_statx)
+  int res;
+  res = syscall(__NR_statx, fd, path, flags, mask, statx_buf);
+  if (res == 0)
+    MSAN_UNPOISON(stat_buf, sizeof(*stat_buf));
+  return res;
+#else  // defined(__NR_statx)
+  RAW_CHECK(false);
+  return -ENOSYS;
+#endif
+}
+
 int sys_stat(const char* path, struct kernel_stat* stat_buf) {
   int res;
 #if !defined(__NR_stat)
+#if defined(__NR_statx)
+  kernel_statx statx_buf;
+  res = sys_statx(AT_FDCWD, path, AT_STATX_SYNC_AS_STAT, STATX_BASIC_STATS,
+                  &statx_buf);
+  if (res == 0)
+    statx_to_stat(stat_buf, &statx_buf);
+#else  // defined(__NR_statx)
   res = syscall(__NR_newfstatat, AT_FDCWD, path, stat_buf, 0);
-#else
+#endif
+#else  //! defined(__NR_stat)
   res = syscall(__NR_stat, path, stat_buf);
 #endif
   if (res == 0)
@@ -178,8 +225,17 @@ int sys_stat(const char* path, struct kernel_stat* stat_buf) {
 int sys_lstat(const char* path, struct kernel_stat* stat_buf) {
   int res;
 #if !defined(__NR_lstat)
+#if defined(__NR_statx)
+  kernel_statx statx_buf;
+  int flag = 0;
+  flag = AT_NO_AUTOMOUNT | AT_SYMLINK_NOFOLLOW;
+  res = sys_statx(AT_FDCWD, path, flag, STATX_BASIC_STATS, &statx_buf);
+  if (res == 0)
+    statx_to_stat(stat_buf, &statx_buf);
+#else  // defined(__NR_statx)
   res = syscall(__NR_newfstatat, AT_FDCWD, path, stat_buf, AT_SYMLINK_NOFOLLOW);
-#else
+#endif
+#else  //! defined(__NR_lstat)
   res = syscall(__NR_lstat, path, stat_buf);
 #endif
   if (res == 0)
diff --git a/sandbox/linux/services/syscall_wrappers.h b/sandbox/linux/services/syscall_wrappers.h
index a05d4470227..2952f9a3458 100644
--- a/sandbox/linux/services/syscall_wrappers.h
+++ b/sandbox/linux/services/syscall_wrappers.h
@@ -18,6 +18,7 @@ struct rlimit64;
 struct cap_hdr;
 struct cap_data;
 struct kernel_stat;
+struct kernel_statx;
 struct kernel_stat64;
 
 namespace sandbox {
@@ -91,6 +92,11 @@ SANDBOX_EXPORT int sys_sigaction(int signum,
 // architectures, with the same capabilities as stat() and lstat().
 SANDBOX_EXPORT int sys_stat(const char* path, struct kernel_stat* stat_buf);
 SANDBOX_EXPORT int sys_lstat(const char* path, struct kernel_stat* stat_buf);
+SANDBOX_EXPORT int sys_statx(int fd,
+                             const char* path,
+                             int flags,
+                             unsigned int mask,
+                             struct kernel_statx* statx_buf);
 
 // Takes care of unpoisoning |stat_buf| for MSAN. Check-fails if fstatat64() is
 // not a supported syscall on the current platform.
diff --git a/sandbox/linux/services/syscall_wrappers_unittest.cc b/sandbox/linux/services/syscall_wrappers_unittest.cc
index d8a0fbc487a..ecf5e837497 100644
--- a/sandbox/linux/services/syscall_wrappers_unittest.cc
+++ b/sandbox/linux/services/syscall_wrappers_unittest.cc
@@ -99,6 +99,7 @@ TEST(SyscallWrappers, LinuxSigSet) {
             linux_sigset);
 }
 
+#if !defined(__loongarch64)
 TEST(SyscallWrappers, Stat) {
   // Create a file to stat, with 12 bytes of data.
   ScopedTemporaryFile tmp_file;
@@ -165,6 +166,7 @@ TEST(SyscallWrappers, Stat) {
   EXPECT_EQ(0u, sb->__unused5);
 #endif
 }
+#endif
 
 #if defined(__NR_fstatat64)
 TEST(SyscallWrappers, Stat64) {
diff --git a/sandbox/linux/syscall_broker/broker_client.cc b/sandbox/linux/syscall_broker/broker_client.cc
index 679ff420d07..95113afb0ac 100644
--- a/sandbox/linux/syscall_broker/broker_client.cc
+++ b/sandbox/linux/syscall_broker/broker_client.cc
@@ -193,6 +193,21 @@ int BrokerClient::Stat64(const char* pathname,
                            sizeof(*sb));
 }
 
+int BrokerClient::Statx(const char* pathname,
+                        bool follow_links,
+                        struct kernel_statx* sb) const {
+  if (!pathname || !sb)
+    return -EFAULT;
+
+  if (fast_check_in_client_ &&
+      !CommandStatIsSafe(policy_->allowed_command_set,
+                         *policy_->file_permissions, pathname)) {
+    return -policy_->file_permissions->denied_errno();
+  }
+  return StatFamilySyscall(COMMAND_STATX, pathname, follow_links, sb,
+                           sizeof(*sb));
+}
+
 int BrokerClient::Unlink(const char* path) const {
   if (!path)
     return -EFAULT;
diff --git a/sandbox/linux/syscall_broker/broker_client.h b/sandbox/linux/syscall_broker/broker_client.h
index 9d0fdee5f3a..32efc3f5981 100644
--- a/sandbox/linux/syscall_broker/broker_client.h
+++ b/sandbox/linux/syscall_broker/broker_client.h
@@ -67,6 +67,9 @@ class SANDBOX_EXPORT BrokerClient : public SyscallDispatcher {
   int Stat64(const char* pathname,
              bool follow_links,
              struct kernel_stat64* sb) const override;
+  int Statx(const char* pathname,
+            bool follow_links,
+            struct kernel_statx* sb) const override;
   int Unlink(const char* unlink) const override;
   int InotifyAddWatch(int fd,
                       const char* pathname,
diff --git a/sandbox/linux/syscall_broker/broker_command.h b/sandbox/linux/syscall_broker/broker_command.h
index d44c42fe2b2..5fd22d8186f 100644
--- a/sandbox/linux/syscall_broker/broker_command.h
+++ b/sandbox/linux/syscall_broker/broker_command.h
@@ -42,6 +42,7 @@ enum BrokerCommand {
   COMMAND_RMDIR,
   COMMAND_STAT,
   COMMAND_STAT64,
+  COMMAND_STATX,
   COMMAND_UNLINK,
   COMMAND_INOTIFY_ADD_WATCH,
 
diff --git a/sandbox/linux/syscall_broker/broker_host.cc b/sandbox/linux/syscall_broker/broker_host.cc
index 84471210076..d2a93f5914d 100644
--- a/sandbox/linux/syscall_broker/broker_host.cc
+++ b/sandbox/linux/syscall_broker/broker_host.cc
@@ -299,7 +299,22 @@ void BrokerHost::StatFileForIPC(BrokerCommand command_type,
     RAW_CHECK(reply->AddIntToMessage(0));
     RAW_CHECK(
         reply->AddDataToMessage(reinterpret_cast<char*>(&sb), sizeof(sb)));
-#else  // defined(__NR_fstatat64)
+#elif defined(__NR_statx)
+    DCHECK(command_type == COMMAND_STATX);
+    struct kernel_statx sb;
+
+    int sts = sandbox::sys_statx(AT_FDCWD, file_to_access,
+                                 follow_links ? 0 : AT_SYMLINK_NOFOLLOW,
+                                 STATX_BASIC_STATS, &sb);
+    if (sts < 0) {
+      RAW_CHECK(reply->AddIntToMessage(-errno));
+      return;
+    }
+    RAW_CHECK(reply->AddIntToMessage(0));
+    RAW_CHECK(
+        reply->AddDataToMessage(reinterpret_cast<char*>(&sb), sizeof(sb)));
+
+#else
     // We should not reach here on 64-bit systems, as the *stat*64() are only
     // necessary on 32-bit.
     RAW_CHECK(false);
@@ -438,7 +453,8 @@ bool BrokerHost::HandleRemoteCommand(BrokerSimpleMessage* message,
       break;
     }
     case COMMAND_STAT:
-    case COMMAND_STAT64: {
+    case COMMAND_STAT64:
+    case COMMAND_STATX: {
       const char* requested_filename;
       if (!message->ReadString(&requested_filename)) {
         return false;
diff --git a/sandbox/linux/syscall_broker/broker_process.cc b/sandbox/linux/syscall_broker/broker_process.cc
index a55b548a8ec..ccb01b84605 100644
--- a/sandbox/linux/syscall_broker/broker_process.cc
+++ b/sandbox/linux/syscall_broker/broker_process.cc
@@ -122,44 +122,46 @@ bool BrokerProcess::IsSyscallBrokerable(int sysno, bool fast_check) const {
   // and are default disabled in Android. So, we should refuse to broker them
   // to be consistent with the platform's restrictions.
   switch (sysno) {
-#if !defined(__aarch64__) && !BUILDFLAG(IS_ANDROID)
+#if !defined(__aarch64__) && !defined(__loongarch64) && !BUILDFLAG(IS_ANDROID)
     case __NR_access:
 #endif
     case __NR_faccessat:
+#if !defined(__loongarch64)
     case __NR_faccessat2:
+#endif
       return !fast_check || policy_->allowed_command_set.test(COMMAND_ACCESS);
 
-#if !defined(__aarch64__) && !BUILDFLAG(IS_ANDROID)
+#if !defined(__aarch64__) && !defined(__loongarch64) && !BUILDFLAG(IS_ANDROID)
     case __NR_mkdir:
 #endif
     case __NR_mkdirat:
       return !fast_check || policy_->allowed_command_set.test(COMMAND_MKDIR);
 
-#if !defined(__aarch64__) && !BUILDFLAG(IS_ANDROID)
+#if !defined(__aarch64__) && !defined(__loongarch64) && !BUILDFLAG(IS_ANDROID)
     case __NR_open:
 #endif
     case __NR_openat:
       return !fast_check || policy_->allowed_command_set.test(COMMAND_OPEN);
 
-#if !defined(__aarch64__) && !BUILDFLAG(IS_ANDROID)
+#if !defined(__aarch64__) && !defined(__loongarch64) && !BUILDFLAG(IS_ANDROID)
     case __NR_readlink:
 #endif
     case __NR_readlinkat:
       return !fast_check || policy_->allowed_command_set.test(COMMAND_READLINK);
 
-#if !defined(__aarch64__) && !BUILDFLAG(IS_ANDROID)
+#if !defined(__aarch64__) && !defined(__loongarch64) && !BUILDFLAG(IS_ANDROID)
     case __NR_rename:
 #endif
     case __NR_renameat:
     case __NR_renameat2:
       return !fast_check || policy_->allowed_command_set.test(COMMAND_RENAME);
 
-#if !defined(__aarch64__) && !BUILDFLAG(IS_ANDROID)
+#if !defined(__aarch64__) && !defined(__loongarch64) && !BUILDFLAG(IS_ANDROID)
     case __NR_rmdir:
       return !fast_check || policy_->allowed_command_set.test(COMMAND_RMDIR);
 #endif
 
-#if !defined(__aarch64__) && !BUILDFLAG(IS_ANDROID)
+#if !defined(__aarch64__) && !defined(__loongarch64) && !BUILDFLAG(IS_ANDROID)
     case __NR_stat:
     case __NR_lstat:
 #endif
@@ -171,6 +173,9 @@ bool BrokerProcess::IsSyscallBrokerable(int sysno, bool fast_check) const {
 #endif
 #if defined(__x86_64__) || defined(__aarch64__)
     case __NR_newfstatat:
+#endif
+#if defined(__NR_statx)
+    case __NR_statx:
 #endif
       return !fast_check || policy_->allowed_command_set.test(COMMAND_STAT);
 
@@ -184,7 +189,7 @@ bool BrokerProcess::IsSyscallBrokerable(int sysno, bool fast_check) const {
       return !fast_check || policy_->allowed_command_set.test(COMMAND_STAT);
 #endif
 
-#if !defined(__aarch64__) && !BUILDFLAG(IS_ANDROID)
+#if !defined(__aarch64__) && !defined(__loongarch64) && !BUILDFLAG(IS_ANDROID)
     case __NR_unlink:
       return !fast_check || policy_->allowed_command_set.test(COMMAND_UNLINK);
 #endif
diff --git a/sandbox/linux/syscall_broker/broker_process_unittest.cc b/sandbox/linux/syscall_broker/broker_process_unittest.cc
index cb85c87f2c2..3277ae368d9 100644
--- a/sandbox/linux/syscall_broker/broker_process_unittest.cc
+++ b/sandbox/linux/syscall_broker/broker_process_unittest.cc
@@ -880,6 +880,9 @@ TEST(BrokerProcess, CreateFile) {
   unlink(permfile_name);
 }
 
+// Use statx instead of stat,lstat and fstatat on loongarch64 architecture,
+// So not test run TestStatHelper on loongarch64.
+#if !defined(__loongarch64)
 void TestStatHelper(bool fast_check_in_client, bool follow_links) {
   ScopedTemporaryFile tmp_file;
   EXPECT_EQ(12, write(tmp_file.fd(), "blahblahblah", 12));
@@ -1060,7 +1063,6 @@ void TestStatHelper(bool fast_check_in_client, bool follow_links) {
     EXPECT_EQ(0,
               open_broker.GetBrokerClientSignalBased()->DefaultStatForTesting(
                   tempfile_name, follow_links, &sb));
-
     // Following fields may never be consistent but should be non-zero.
     // Don't trust the platform to define fields with any particular sign.
     EXPECT_NE(0u, static_cast<unsigned int>(sb.st_dev));
@@ -1092,6 +1094,7 @@ TEST(BrokerProcess, StatFileHost) {
   TestStatHelper(false, true);
   TestStatHelper(false, false);
 }
+#endif
 
 void TestRenameHelper(bool fast_check_in_client) {
   std::string oldpath;
@@ -1973,7 +1976,10 @@ TEST(BrokerProcess, InotifyAddWatchHost) {
 TEST(BrokerProcess, IsSyscallAllowed) {
   const base::flat_map<BrokerCommand, base::flat_set<int>> kSysnosForCommand = {
       {COMMAND_ACCESS,
-       {__NR_faccessat, __NR_faccessat2,
+       {__NR_faccessat,
+#if !defined(__loongarch64)
+	__NR_faccessat2,
+#endif
 #if defined(__NR_access) && !BUILDFLAG(IS_ANDROID)
         __NR_access
 #endif
@@ -1996,12 +2002,14 @@ TEST(BrokerProcess, IsSyscallAllowed) {
         __NR_readlink
 #endif
        }},
+#if !defined(__loongarch64)
       {COMMAND_RENAME,
        {__NR_renameat,
 #if defined(__NR_rename) && !BUILDFLAG(IS_ANDROID)
         __NR_rename
 #endif
        }},
+#endif
       {COMMAND_UNLINK,
        {__NR_unlinkat,
 #if defined(__NR_unlink) && !BUILDFLAG(IS_ANDROID)
diff --git a/sandbox/linux/syscall_broker/remote_syscall_arg_handler_unittest.cc b/sandbox/linux/syscall_broker/remote_syscall_arg_handler_unittest.cc
index 15b2ee66d4b..4f6bf2c6df3 100644
--- a/sandbox/linux/syscall_broker/remote_syscall_arg_handler_unittest.cc
+++ b/sandbox/linux/syscall_broker/remote_syscall_arg_handler_unittest.cc
@@ -28,7 +28,11 @@ namespace {
 const char kPathPart[] = "/i/am/path";
 
 void FillBufferWithPath(char* buf, size_t size, bool null_terminate) {
+#if defined(__loongarch64)
+  SANDBOX_ASSERT_LE(size, static_cast<size_t>(PATH_MAX * 4));
+#else
   SANDBOX_ASSERT_LE(size, static_cast<size_t>(PATH_MAX));
+#endif
   size_t str_len = strlen(kPathPart);
   size_t len_left_to_write = size;
   char* curr_buf_pos = buf;
diff --git a/sandbox/linux/syscall_broker/syscall_dispatcher.cc b/sandbox/linux/syscall_broker/syscall_dispatcher.cc
index 6abc80b432e..17e47af0cca 100644
--- a/sandbox/linux/syscall_broker/syscall_dispatcher.cc
+++ b/sandbox/linux/syscall_broker/syscall_dispatcher.cc
@@ -26,6 +26,8 @@ int SyscallDispatcher::DefaultStatForTesting(const char* pathname,
   return Stat64(pathname, follow_links, sb);
 #elif defined(__NR_newfstatat)
   return Stat(pathname, follow_links, sb);
+#elif defined(__NR_statx)
+  return Statx(pathname, follow_links, sb);
 #endif
 }
 
@@ -169,6 +171,11 @@ int SyscallDispatcher::DispatchSyscall(const arch_seccomp_data& args) {
       return Stat64(reinterpret_cast<const char*>(args.args[0]), true,
                     reinterpret_cast<struct kernel_stat64*>(args.args[1]));
 #endif
+#if defined(__NR_statx)
+    case __NR_statx:
+      return Statx(reinterpret_cast<const char*>(args.args[0]), true,
+                   reinterpret_cast<struct kernel_statx*>(args.args[1]));
+#endif
 #if defined(__NR_lstat)
     case __NR_lstat:
       // See https://crbug.com/847096
diff --git a/sandbox/linux/syscall_broker/syscall_dispatcher.h b/sandbox/linux/syscall_broker/syscall_dispatcher.h
index 906c37d922f..7d0b8e0351a 100644
--- a/sandbox/linux/syscall_broker/syscall_dispatcher.h
+++ b/sandbox/linux/syscall_broker/syscall_dispatcher.h
@@ -49,6 +49,9 @@ class SANDBOX_EXPORT SyscallDispatcher {
   virtual int Stat64(const char* pathname,
                      bool follow_links,
                      struct kernel_stat64* sb) const = 0;
+  virtual int Statx(const char* pathname,
+                    bool follow_links,
+                    struct kernel_statx* sb) const = 0;
 
   // Emulates unlink()/unlinkat().
   virtual int Unlink(const char* unlink) const = 0;
diff --git a/sandbox/linux/system_headers/linux_seccomp.h b/sandbox/linux/system_headers/linux_seccomp.h
index 8690a96eb01..528fb0cef13 100644
--- a/sandbox/linux/system_headers/linux_seccomp.h
+++ b/sandbox/linux/system_headers/linux_seccomp.h
@@ -39,6 +39,10 @@
 #define EM_AARCH64 183
 #endif
 
+#ifndef EM_LOONGARCH
+#define EM_LOONGARCH 258
+#endif
+
 #ifndef __AUDIT_ARCH_64BIT
 #define __AUDIT_ARCH_64BIT 0x80000000
 #endif
@@ -71,6 +75,11 @@
 #define AUDIT_ARCH_AARCH64 (EM_AARCH64 | __AUDIT_ARCH_64BIT | __AUDIT_ARCH_LE)
 #endif
 
+#ifndef AUDIT_ARCH_LOONGARCH64
+#define AUDIT_ARCH_LOONGARCH64 \
+  (EM_LOONGARCH | __AUDIT_ARCH_64BIT | __AUDIT_ARCH_LE)
+#endif
+
 // For prctl.h
 #ifndef PR_SET_SECCOMP
 #define PR_SET_SECCOMP               22
diff --git a/sandbox/linux/system_headers/linux_signal.h b/sandbox/linux/system_headers/linux_signal.h
index 69ccaf10815..a6c51097c97 100644
--- a/sandbox/linux/system_headers/linux_signal.h
+++ b/sandbox/linux/system_headers/linux_signal.h
@@ -13,7 +13,7 @@
 // (not undefined, but defined different values and in different memory
 // layouts). So, fill the gap here.
 #if defined(__i386__) || defined(__x86_64__) || defined(__arm__) || \
-    defined(__aarch64__)
+    defined(__aarch64__) || defined(__loongarch64)
 
 #define LINUX_SIGHUP 1
 #define LINUX_SIGINT 2
@@ -97,6 +97,7 @@ typedef siginfo_t LinuxSigInfo;
 struct LinuxSigSet {
   unsigned long sig[_NSIG_WORDS];
 };
+// TODO:LA64 Check this _NSIG_WORDS and LinuxSigAction
 #elif defined(ARCH_CPU_MIPS_FAMILY) && defined(ARCH_CPU_64_BITS)
 #if !defined(_NSIG_WORDS)
 #define _NSIG_WORDS 2
@@ -104,6 +105,13 @@ struct LinuxSigSet {
 struct LinuxSigSet {
   unsigned long sig[_NSIG_WORDS];
 };
+#elif defined(ARCH_CPU_LOONG_FAMILY)
+#if !defined(_NSIG_WORDS)
+#define _NSIG_WORDS 1
+#endif
+struct LinuxSigSet {
+  unsigned long sig[_NSIG_WORDS];
+};
 #else
 typedef uint64_t LinuxSigSet;
 #endif
diff --git a/sandbox/linux/system_headers/linux_stat.h b/sandbox/linux/system_headers/linux_stat.h
index 3aae8cbced7..a6a780450d5 100644
--- a/sandbox/linux/system_headers/linux_stat.h
+++ b/sandbox/linux/system_headers/linux_stat.h
@@ -150,7 +150,7 @@ struct kernel_stat {
   int st_blocks;
   int st_pad4[14];
 };
-#elif defined(__aarch64__)
+#elif defined(__aarch64__) || defined(__loongarch64)
 struct kernel_stat {
   unsigned long st_dev;
   unsigned long st_ino;
@@ -175,6 +175,37 @@ struct kernel_stat {
 };
 #endif
 
+#if defined(__loongarch64)
+struct kernel_statx_timestamp {
+  long tv_sec;
+  unsigned int tv_nsec;
+  int __reserved;
+};
+struct kernel_statx {
+  unsigned int stx_mask;
+  unsigned int stx_blksize;
+  unsigned long stx_attributes;
+  unsigned int stx_nlink;
+  unsigned int stx_uid;
+  unsigned int stx_gid;
+  unsigned short stx_mode;
+  unsigned short __spare0[1];
+  unsigned long stx_ino;
+  unsigned long stx_size;
+  unsigned long stx_blocks;
+  unsigned long stx_attributes_mask;
+  struct kernel_statx_timestamp stx_atime;
+  struct kernel_statx_timestamp stx_btime;
+  struct kernel_statx_timestamp stx_ctime;
+  struct kernel_statx_timestamp stx_mtime;
+  unsigned int stx_rdev_major;
+  unsigned int stx_rdev_minor;
+  unsigned int stx_dev_major;
+  unsigned int stx_dev_minor;
+  unsigned long __spare2[14];
+};
+#endif
+
 #if !defined(AT_EMPTY_PATH)
 #define AT_EMPTY_PATH 0x1000
 #endif
@@ -207,6 +238,20 @@ using default_stat_struct = struct kernel_stat;
 #define __NR_fstatat_default __NR_newfstatat
 #define __NR_fstat_default __NR_fstat
 
+#elif defined(__NR_statx)
+
+namespace sandbox {
+using default_stat_struct = struct kernel_statx;
+}  // namespace sandbox
+
+#define AT_STATX_SYNC_TYPE 0x6000
+#define AT_STATX_SYNC_AS_STAT 0x0000
+#define AT_STATX_FORCE_SYNC 0x2000
+#define AT_STATX_DONT_SYNC 0x4000
+#define STATX_ALL 0x00000fffU
+
+#define __NR_statx_default __NR_statx
+
 #else
 #error "one of fstatat64 and newfstatat must be defined"
 #endif
diff --git a/sandbox/linux/system_headers/linux_syscalls.h b/sandbox/linux/system_headers/linux_syscalls.h
index 438147b4018..ed0aa3e2e5a 100644
--- a/sandbox/linux/system_headers/linux_syscalls.h
+++ b/sandbox/linux/system_headers/linux_syscalls.h
@@ -35,5 +35,9 @@
 #include "sandbox/linux/system_headers/arm64_linux_syscalls.h"
 #endif
 
+#if defined(__loongarch64)
+#include "sandbox/linux/system_headers/loongarch64_linux_syscalls.h"
+#endif
+
 #endif  // SANDBOX_LINUX_SYSTEM_HEADERS_LINUX_SYSCALLS_H_
 
diff --git a/sandbox/linux/system_headers/loongarch64_linux_syscalls.h b/sandbox/linux/system_headers/loongarch64_linux_syscalls.h
new file mode 100644
index 00000000000..65bd0ac8e77
--- /dev/null
+++ b/sandbox/linux/system_headers/loongarch64_linux_syscalls.h
@@ -0,0 +1,851 @@
+// Copyright 2021 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef SANDBOX_LINUX_SYSTEM_HEADERS_LOONGARCH64_LINUX_SYSCALLS_H_
+#define SANDBOX_LINUX_SYSTEM_HEADERS_LOONGARCH64_LINUX_SYSCALLS_H_
+
+#if !defined(__loongarch__)
+#error "Including header on wrong architecture"
+#endif
+#include <asm/unistd.h>
+#if !defined(__NR_io_setup)
+#define __NR_io_setup 0
+#endif
+#if !defined(__NR_io_destroy)
+#define __NR_io_destroy 1
+#endif
+#if !defined(__NR_io_submit)
+#define __NR_io_submit 2
+#endif
+#if !defined(__NR_io_cancel)
+#define __NR_io_cancel 3
+#endif
+#if !defined(__NR_io_getevents)
+#define __NR_io_getevents 4
+#endif
+#if !defined(__NR_setxattr)
+#define __NR_setxattr 5
+#endif
+#if !defined(__NR_lsetxattr)
+#define __NR_lsetxattr 6
+#endif
+#if !defined(__NR_fsetxattr)
+#define __NR_fsetxattr 7
+#endif
+#if !defined(__NR_getxattr)
+#define __NR_getxattr 8
+#endif
+#if !defined(__NR_lgetxattr)
+#define __NR_lgetxattr 9
+#endif
+#if !defined(__NR_fgetxattr)
+#define __NR_fgetxattr 10
+#endif
+#if !defined(__NR_listxattr)
+#define __NR_listxattr 11
+#endif
+#if !defined(__NR_llistxattr)
+#define __NR_llistxattr 12
+#endif
+#if !defined(__NR_flistxattr)
+#define __NR_flistxattr 13
+#endif
+#if !defined(__NR_removexattr)
+#define __NR_removexattr 14
+#endif
+#if !defined(__NR_lremovexattr)
+#define __NR_lremovexattr 15
+#endif
+#if !defined(__NR_fremovexattr)
+#define __NR_fremovexattr 16
+#endif
+#if !defined(__NR_getcwd)
+#define __NR_getcwd 17
+#endif
+#if !defined(__NR_lookup_dcookie)
+#define __NR_lookup_dcookie 18
+#endif
+#if !defined(__NR_eventfd2)
+#define __NR_eventfd2 19
+#endif
+#if !defined(__NR_epoll_create1)
+#define __NR_epoll_create1 20
+#endif
+#if !defined(__NR_epoll_ctl)
+#define __NR_epoll_ctl 21
+#endif
+#if !defined(__NR_epoll_pwait)
+#define __NR_epoll_pwait 22
+#endif
+#if !defined(__NR_dup)
+#define __NR_dup 23
+#endif
+#if !defined(__NR_dup3)
+#define __NR_dup3 24
+#endif
+#if !defined(__NR_fcntl)
+#define __NR_fcntl 25
+#endif
+#if !defined(__NR_inotify_init1)
+#define __NR_inotify_init1 26
+#endif
+#if !defined(__NR_inotify_add_watch)
+#define __NR_inotify_add_watch 27
+#endif
+#if !defined(__NR_inotify_rm_watch)
+#define __NR_inotify_rm_watch 28
+#endif
+#if !defined(__NR_ioctl)
+#define __NR_ioctl 29
+#endif
+#if !defined(__NR_ioprio_set)
+#define __NR_ioprio_set 30
+#endif
+#if !defined(__NR_ioprio_get)
+#define __NR_ioprio_get 31
+#endif
+#if !defined(__NR_flock)
+#define __NR_flock 32
+#endif
+#if !defined(__NR_mknodat)
+#define __NR_mknodat 33
+#endif
+#if !defined(__NR_mkdirat)
+#define __NR_mkdirat 34
+#endif
+#if !defined(__NR_unlinkat)
+#define __NR_unlinkat 35
+#endif
+#if !defined(__NR_symlinkat)
+#define __NR_symlinkat 36
+#endif
+#if !defined(__NR_linkat)
+#define __NR_linkat 37
+#endif
+#if !defined(__NR_renameat)
+#define __NR_renameat 38
+#endif
+#if !defined(__NR_umount2)
+#define __NR_umount2 39
+#endif
+#if !defined(__NR_mount)
+#define __NR_mount 40
+#endif
+#if !defined(__NR_pivot_root)
+#define __NR_pivot_root 41
+#endif
+#if !defined(__NR_nfsservctl)
+#define __NR_nfsservctl 42
+#endif
+#if !defined(__NR_statfs)
+#define __NR_statfs 43
+#endif
+#if !defined(__NR_fstatfs)
+#define __NR_fstatfs 44
+#endif
+#if !defined(__NR_truncate)
+#define __NR_truncate 45
+#endif
+#if !defined(__NR_ftruncate)
+#define __NR_ftruncate 46
+#endif
+#if !defined(__NR_fallocate)
+#define __NR_fallocate 47
+#endif
+#if !defined(__NR_faccessat)
+#define __NR_faccessat 48
+#endif
+#if !defined(__NR_chdir)
+#define __NR_chdir 49
+#endif
+#if !defined(__NR_fchdir)
+#define __NR_fchdir 50
+#endif
+#if !defined(__NR_chroot)
+#define __NR_chroot 51
+#endif
+#if !defined(__NR_fchmod)
+#define __NR_fchmod 52
+#endif
+#if !defined(__NR_fchmodat)
+#define __NR_fchmodat 53
+#endif
+#if !defined(__NR_fchownat)
+#define __NR_fchownat 54
+#endif
+#if !defined(__NR_fchown)
+#define __NR_fchown 55
+#endif
+#if !defined(__NR_openat)
+#define __NR_openat 56
+#endif
+#if !defined(__NR_close)
+#define __NR_close 57
+#endif
+#if !defined(__NR_vhangup)
+#define __NR_vhangup 58
+#endif
+#if !defined(__NR_pipe2)
+#define __NR_pipe2 59
+#endif
+#if !defined(__NR_quotactl)
+#define __NR_quotactl 60
+#endif
+#if !defined(__NR_getdents64)
+#define __NR_getdents64 61
+#endif
+#if !defined(__NR_lseek)
+#define __NR_lseek 62
+#endif
+#if !defined(__NR_read)
+#define __NR_read 63
+#endif
+#if !defined(__NR_write)
+#define __NR_write 64
+#endif
+#if !defined(__NR_readv)
+#define __NR_readv 65
+#endif
+#if !defined(__NR_writev)
+#define __NR_writev 66
+#endif
+#if !defined(__NR_pread64)
+#define __NR_pread64 67
+#endif
+#if !defined(__NR_pwrite64)
+#define __NR_pwrite64 68
+#endif
+#if !defined(__NR_preadv)
+#define __NR_preadv 69
+#endif
+#if !defined(__NR_pwritev)
+#define __NR_pwritev 70
+#endif
+#if !defined(__NR_sendfile)
+#define __NR_sendfile 71
+#endif
+#if !defined(__NR_pselect6)
+#define __NR_pselect6 72
+#endif
+#if !defined(__NR_ppoll)
+#define __NR_ppoll 73
+#endif
+#if !defined(__NR_signalfd4)
+#define __NR_signalfd4 74
+#endif
+#if !defined(__NR_vmsplice)
+#define __NR_vmsplice 75
+#endif
+#if !defined(__NR_splice)
+#define __NR_splice 76
+#endif
+#if !defined(__NR_tee)
+#define __NR_tee 77
+#endif
+#if !defined(__NR_readlinkat)
+#define __NR_readlinkat 78
+#endif
+#if defined(__ARCH_WANT_NEW_STAT) || defined(__ARCH_WANT_STAT64)
+#if !defined(__NR_newfstatat)
+#define __NR_newfstatat 79
+#endif
+#if !defined(__NR_fstat)
+#define __NR_fstat 80
+#endif
+#endif
+#if !defined(__NR_sync)
+#define __NR_sync 81
+#endif
+#if !defined(__NR_fsync)
+#define __NR_fsync 82
+#endif
+#if !defined(__NR_fdatasync)
+#define __NR_fdatasync 83
+#endif
+#if !defined(__NR_sync_file_range)
+#define __NR_sync_file_range 84
+#endif
+#if !defined(__NR_timerfd_create)
+#define __NR_timerfd_create 85
+#endif
+#if !defined(__NR_timerfd_settime)
+#define __NR_timerfd_settime 86
+#endif
+#if !defined(__NR_timerfd_gettime)
+#define __NR_timerfd_gettime 87
+#endif
+#if !defined(__NR_utimensat)
+#define __NR_utimensat 88
+#endif
+#if !defined(__NR_acct)
+#define __NR_acct 89
+#endif
+#if !defined(__NR_capget)
+#define __NR_capget 90
+#endif
+#if !defined(__NR_capset)
+#define __NR_capset 91
+#endif
+#if !defined(__NR_personality)
+#define __NR_personality 92
+#endif
+#if !defined(__NR_exit)
+#define __NR_exit 93
+#endif
+#if !defined(__NR_exit_group)
+#define __NR_exit_group 94
+#endif
+#if !defined(__NR_waitid)
+#define __NR_waitid 95
+#endif
+#if !defined(__NR_set_tid_address)
+#define __NR_set_tid_address 96
+#endif
+#if !defined(__NR_unshare)
+#define __NR_unshare 97
+#endif
+#if !defined(__NR_futex)
+#define __NR_futex 98
+#endif
+#if !defined(__NR_set_robust_list)
+#define __NR_set_robust_list 99
+#endif
+#if !defined(__NR_get_robust_list)
+#define __NR_get_robust_list 100
+#endif
+#if !defined(__NR_nanosleep)
+#define __NR_nanosleep 101
+#endif
+#if !defined(__NR_getitimer)
+#define __NR_getitimer 102
+#endif
+#if !defined(__NR_setitimer)
+#define __NR_setitimer 103
+#endif
+#if !defined(__NR_kexec_load)
+#define __NR_kexec_load 104
+#endif
+#if !defined(__NR_init_module)
+#define __NR_init_module 105
+#endif
+#if !defined(__NR_delete_module)
+#define __NR_delete_module 106
+#endif
+#if !defined(__NR_timer_create)
+#define __NR_timer_create 107
+#endif
+#if !defined(__NR_timer_gettime)
+#define __NR_timer_gettime 108
+#endif
+#if !defined(__NR_timer_getoverrun)
+#define __NR_timer_getoverrun 109
+#endif
+#if !defined(__NR_timer_settime)
+#define __NR_timer_settime 110
+#endif
+#if !defined(__NR_timer_delete)
+#define __NR_timer_delete 111
+#endif
+#if !defined(__NR_clock_settime)
+#define __NR_clock_settime 112
+#endif
+#if !defined(__NR_clock_gettime)
+#define __NR_clock_gettime 113
+#endif
+#if !defined(__NR_clock_getres)
+#define __NR_clock_getres 114
+#endif
+#if !defined(__NR_clock_nanosleep)
+#define __NR_clock_nanosleep 115
+#endif
+#if !defined(__NR_syslog)
+#define __NR_syslog 116
+#endif
+#if !defined(__NR_ptrace)
+#define __NR_ptrace 117
+#endif
+#if !defined(__NR_sched_setparam)
+#define __NR_sched_setparam 118
+#endif
+#if !defined(__NR_sched_setscheduler)
+#define __NR_sched_setscheduler 119
+#endif
+#if !defined(__NR_sched_getscheduler)
+#define __NR_sched_getscheduler 120
+#endif
+#if !defined(__NR_sched_getparam)
+#define __NR_sched_getparam 121
+#endif
+#if !defined(__NR_sched_setaffinity)
+#define __NR_sched_setaffinity 122
+#endif
+#if !defined(__NR_sched_getaffinity)
+#define __NR_sched_getaffinity 123
+#endif
+#if !defined(__NR_sched_yield)
+#define __NR_sched_yield 124
+#endif
+#if !defined(__NR_sched_get_priority_max)
+#define __NR_sched_get_priority_max 125
+#endif
+#if !defined(__NR_sched_get_priority_min)
+#define __NR_sched_get_priority_min 126
+#endif
+#if !defined(__NR_sched_rr_get_interval)
+#define __NR_sched_rr_get_interval 127
+#endif
+#if !defined(__NR_restart_syscall)
+#define __NR_restart_syscall 128
+#endif
+#if !defined(__NR_kill)
+#define __NR_kill 129
+#endif
+#if !defined(__NR_tkill)
+#define __NR_tkill 130
+#endif
+#if !defined(__NR_tgkill)
+#define __NR_tgkill 131
+#endif
+#if !defined(__NR_sigaltstack)
+#define __NR_sigaltstack 132
+#endif
+#if !defined(__NR_rt_sigsuspend)
+#define __NR_rt_sigsuspend 133
+#endif
+#if !defined(__NR_rt_sigaction)
+#define __NR_rt_sigaction 134
+#endif
+#if !defined(__NR_rt_sigprocmask)
+#define __NR_rt_sigprocmask 135
+#endif
+#if !defined(__NR_rt_sigpending)
+#define __NR_rt_sigpending 136
+#endif
+#if !defined(__NR_rt_sigtimedwait)
+#define __NR_rt_sigtimedwait 137
+#endif
+#if !defined(__NR_rt_sigqueueinfo)
+#define __NR_rt_sigqueueinfo 138
+#endif
+#if !defined(__NR_rt_sigreturn)
+#define __NR_rt_sigreturn 139
+#endif
+#if !defined(__NR_setpriority)
+#define __NR_setpriority 140
+#endif
+#if !defined(__NR_getpriority)
+#define __NR_getpriority 141
+#endif
+#if !defined(__NR_reboot)
+#define __NR_reboot 142
+#endif
+#if !defined(__NR_setregid)
+#define __NR_setregid 143
+#endif
+#if !defined(__NR_setgid)
+#define __NR_setgid 144
+#endif
+#if !defined(__NR_setreuid)
+#define __NR_setreuid 145
+#endif
+#if !defined(__NR_setuid)
+#define __NR_setuid 146
+#endif
+#if !defined(__NR_setresuid)
+#define __NR_setresuid 147
+#endif
+#if !defined(__NR_getresuid)
+#define __NR_getresuid 148
+#endif
+#if !defined(__NR_setresgid)
+#define __NR_setresgid 149
+#endif
+#if !defined(__NR_getresgid)
+#define __NR_getresgid 150
+#endif
+#if !defined(__NR_setfsuid)
+#define __NR_setfsuid 151
+#endif
+#if !defined(__NR_setfsgid)
+#define __NR_setfsgid 152
+#endif
+#if !defined(__NR_times)
+#define __NR_times 153
+#endif
+#if !defined(__NR_setpgid)
+#define __NR_setpgid 154
+#endif
+#if !defined(__NR_getpgid)
+#define __NR_getpgid 155
+#endif
+#if !defined(__NR_getsid)
+#define __NR_getsid 156
+#endif
+#if !defined(__NR_setsid)
+#define __NR_setsid 157
+#endif
+#if !defined(__NR_getgroups)
+#define __NR_getgroups 158
+#endif
+#if !defined(__NR_setgroups)
+#define __NR_setgroups 159
+#endif
+#if !defined(__NR_uname)
+#define __NR_uname 160
+#endif
+#if !defined(__NR_sethostname)
+#define __NR_sethostname 161
+#endif
+#if !defined(__NR_setdomainname)
+#define __NR_setdomainname 162
+#endif
+#if !defined(__NR_getrlimit)
+#define __NR_getrlimit 163
+#endif
+#if !defined(__NR_setrlimit)
+#define __NR_setrlimit 164
+#endif
+#if !defined(__NR_getrusage)
+#define __NR_getrusage 165
+#endif
+#if !defined(__NR_umask)
+#define __NR_umask 166
+#endif
+#if !defined(__NR_prctl)
+#define __NR_prctl 167
+#endif
+#if !defined(__NR_getcpu)
+#define __NR_getcpu 168
+#endif
+#if !defined(__NR_gettimeofday)
+#define __NR_gettimeofday 169
+#endif
+#if !defined(__NR_settimeofday)
+#define __NR_settimeofday 170
+#endif
+#if !defined(__NR_adjtimex)
+#define __NR_adjtimex 171
+#endif
+#if !defined(__NR_getpid)
+#define __NR_getpid 172
+#endif
+#if !defined(__NR_getppid)
+#define __NR_getppid 173
+#endif
+#if !defined(__NR_getuid)
+#define __NR_getuid 174
+#endif
+#if !defined(__NR_geteuid)
+#define __NR_geteuid 175
+#endif
+#if !defined(__NR_getgid)
+#define __NR_getgid 176
+#endif
+#if !defined(__NR_getegid)
+#define __NR_getegid 177
+#endif
+#if !defined(__NR_gettid)
+#define __NR_gettid 178
+#endif
+#if !defined(__NR_sysinfo)
+#define __NR_sysinfo 179
+#endif
+#if !defined(__NR_mq_open)
+#define __NR_mq_open 180
+#endif
+#if !defined(__NR_mq_unlink)
+#define __NR_mq_unlink 181
+#endif
+#if !defined(__NR_mq_timedsend)
+#define __NR_mq_timedsend 182
+#endif
+#if !defined(__NR_mq_timedreceive)
+#define __NR_mq_timedreceive 183
+#endif
+#if !defined(__NR_mq_notify)
+#define __NR_mq_notify 184
+#endif
+#if !defined(__NR_mq_getsetattr)
+#define __NR_mq_getsetattr 185
+#endif
+#if !defined(__NR_msgget)
+#define __NR_msgget 186
+#endif
+#if !defined(__NR_msgctl)
+#define __NR_msgctl 187
+#endif
+#if !defined(__NR_msgrcv)
+#define __NR_msgrcv 188
+#endif
+#if !defined(__NR_msgsnd)
+#define __NR_msgsnd 189
+#endif
+#if !defined(__NR_semget)
+#define __NR_semget 190
+#endif
+#if !defined(__NR_semctl)
+#define __NR_semctl 191
+#endif
+#if !defined(__NR_semtimedop)
+#define __NR_semtimedop 192
+#endif
+#if !defined(__NR_semop)
+#define __NR_semop 193
+#endif
+#if !defined(__NR_shmget)
+#define __NR_shmget 194
+#endif
+#if !defined(__NR_shmctl)
+#define __NR_shmctl 195
+#endif
+#if !defined(__NR_shmat)
+#define __NR_shmat 196
+#endif
+#if !defined(__NR_shmdt)
+#define __NR_shmdt 197
+#endif
+#if !defined(__NR_socket)
+#define __NR_socket 198
+#endif
+#if !defined(__NR_socketpair)
+#define __NR_socketpair 199
+#endif
+#if !defined(__NR_bind)
+#define __NR_bind 200
+#endif
+#if !defined(__NR_listen)
+#define __NR_listen 201
+#endif
+#if !defined(__NR_accept)
+#define __NR_accept 202
+#endif
+#if !defined(__NR_connect)
+#define __NR_connect 203
+#endif
+#if !defined(__NR_getsockname)
+#define __NR_getsockname 204
+#endif
+#if !defined(__NR_getpeername)
+#define __NR_getpeername 205
+#endif
+#if !defined(__NR_sendto)
+#define __NR_sendto 206
+#endif
+#if !defined(__NR_recvfrom)
+#define __NR_recvfrom 207
+#endif
+#if !defined(__NR_setsockopt)
+#define __NR_setsockopt 208
+#endif
+#if !defined(__NR_getsockopt)
+#define __NR_getsockopt 209
+#endif
+#if !defined(__NR_shutdown)
+#define __NR_shutdown 210
+#endif
+#if !defined(__NR_sendmsg)
+#define __NR_sendmsg 211
+#endif
+#if !defined(__NR_recvmsg)
+#define __NR_recvmsg 212
+#endif
+#if !defined(__NR_readahead)
+#define __NR_readahead 213
+#endif
+#if !defined(__NR_brk)
+#define __NR_brk 214
+#endif
+#if !defined(__NR_munmap)
+#define __NR_munmap 215
+#endif
+#if !defined(__NR_mremap)
+#define __NR_mremap 216
+#endif
+#if !defined(__NR_add_key)
+#define __NR_add_key 217
+#endif
+#if !defined(__NR_request_key)
+#define __NR_request_key 218
+#endif
+#if !defined(__NR_keyctl)
+#define __NR_keyctl 219
+#endif
+#if !defined(__NR_clone)
+#define __NR_clone 220
+#endif
+#if !defined(__NR_execve)
+#define __NR_execve 221
+#endif
+#if !defined(__NR_mmap)
+#define __NR_mmap 222
+#endif
+#if !defined(__NR_fadvise64)
+#define __NR_fadvise64 223
+#endif
+#if !defined(__NR_swapon)
+#define __NR_swapon 224
+#endif
+#if !defined(__NR_swapoff)
+#define __NR_swapoff 225
+#endif
+#if !defined(__NR_mprotect)
+#define __NR_mprotect 226
+#endif
+#if !defined(__NR_msync)
+#define __NR_msync 227
+#endif
+#if !defined(__NR_mlock)
+#define __NR_mlock 228
+#endif
+#if !defined(__NR_munlock)
+#define __NR_munlock 229
+#endif
+#if !defined(__NR_mlockall)
+#define __NR_mlockall 230
+#endif
+#if !defined(__NR_munlockall)
+#define __NR_munlockall 231
+#endif
+#if !defined(__NR_mincore)
+#define __NR_mincore 232
+#endif
+#if !defined(__NR_madvise)
+#define __NR_madvise 233
+#endif
+#if !defined(__NR_remap_file_pages)
+#define __NR_remap_file_pages 234
+#endif
+#if !defined(__NR_mbind)
+#define __NR_mbind 235
+#endif
+#if !defined(__NR_get_mempolicy)
+#define __NR_get_mempolicy 236
+#endif
+#if !defined(__NR_set_mempolicy)
+#define __NR_set_mempolicy 237
+#endif
+#if !defined(__NR_migrate_pages)
+#define __NR_migrate_pages 238
+#endif
+#if !defined(__NR_move_pages)
+#define __NR_move_pages 239
+#endif
+#if !defined(__NR_rt_tgsigqueueinfo)
+#define __NR_rt_tgsigqueueinfo 240
+#endif
+#if !defined(__NR_perf_event_open)
+#define __NR_perf_event_open 241
+#endif
+#if !defined(__NR_accept4)
+#define __NR_accept4 242
+#endif
+#if !defined(__NR_recvmmsg)
+#define __NR_recvmmsg 243
+#endif
+#if !defined(__NR_wait4)
+#define __NR_wait4 260
+#endif
+#if !defined(__NR_prlimit64)
+#define __NR_prlimit64 261
+#endif
+#if !defined(__NR_fanotify_init)
+#define __NR_fanotify_init 262
+#endif
+#if !defined(__NR_fanotify_mark)
+#define __NR_fanotify_mark 263
+#endif
+#if !defined(__NR_name_to_handle_at)
+#define __NR_name_to_handle_at 264
+#endif
+#if !defined(__NR_open_by_handle_at)
+#define __NR_open_by_handle_at 265
+#endif
+#if !defined(__NR_clock_adjtime)
+#define __NR_clock_adjtime 266
+#endif
+#if !defined(__NR_syncfs)
+#define __NR_syncfs 267
+#endif
+#if !defined(__NR_setns)
+#define __NR_setns 268
+#endif
+#if !defined(__NR_sendmmsg)
+#define __NR_sendmmsg 269
+#endif
+#if !defined(__NR_process_vm_readv)
+#define __NR_process_vm_readv 270
+#endif
+#if !defined(__NR_process_vm_writev)
+#define __NR_process_vm_writev 271
+#endif
+#if !defined(__NR_kcmp)
+#define __NR_kcmp 272
+#endif
+#if !defined(__NR_finit_module)
+#define __NR_finit_module 273
+#endif
+#if !defined(__NR_sched_setattr)
+#define __NR_sched_setattr 274
+#endif
+#if !defined(__NR_sched_getattr)
+#define __NR_sched_getattr 275
+#endif
+#if !defined(__NR_renameat2)
+#define __NR_renameat2 276
+#endif
+#if !defined(__NR_seccomp)
+#define __NR_seccomp 277
+#endif
+#if !defined(__NR_getrandom)
+#define __NR_getrandom 278
+#endif
+#if !defined(__NR_memfd_create)
+#define __NR_memfd_create 279
+#endif
+#if !defined(__NR_bpf)
+#define __NR_bfp 280
+#endif
+#if !defined(__NR_execveat)
+#define __NR_execveat 281
+#endif
+#if !defined(__NR_userfaultfd)
+#define __NR_userfaultfd 282
+#endif
+#if !defined(__NR_membarrier)
+#define __NR_membarrier 283
+#endif
+#if !defined(__NR_mlock2)
+#define __NR_mlock2 284
+#endif
+#if !defined(__NR_copy_file_range)
+#define __NR_copy_file_range 285
+#endif
+#if !defined(__NR_preadv2)
+#define __NR_preadv2 286
+#endif
+#if !defined(__NR_pwritev2)
+#define __NR_pwritev2 287
+#endif
+#if !defined(__NR_pkey_mprotect)
+#define __NR_pkey_mprotect 288
+#endif
+#if !defined(__NR_pkey_alloc)
+#define __NR_pkey_alloc 289
+#endif
+#if !defined(__NR_pkey_free)
+#define __NR_pkey_free 290
+#endif
+#if !defined(__NR_statx)
+#define __NR_statx 291
+#endif
+#if !defined(__NR_io_pgetevents)
+#define __NR_io_pgetevents 292
+#endif
+#if !defined(__NR_rseq)
+#define __NR_rseq 293
+#endif
+#if !defined(__NR_clone3)
+#define __NR_clone3 435
+#endif
+#endif  // SANDBOX_LINUX_SYSTEM_HEADERS_LOONGARCH64_LINUX_SYSCALLS_H_
diff --git a/sandbox/policy/linux/bpf_broker_policy_linux.cc b/sandbox/policy/linux/bpf_broker_policy_linux.cc
index 87a0cc1faf2..3702bf91bab 100644
--- a/sandbox/policy/linux/bpf_broker_policy_linux.cc
+++ b/sandbox/policy/linux/bpf_broker_policy_linux.cc
@@ -87,6 +87,12 @@ ResultExpr BrokerProcessPolicy::EvaluateSyscall(int sysno) const {
         return Allow();
       break;
 #endif
+#if defined(__NR_statx)
+    case __NR_statx:
+      if (allowed_command_set_.test(syscall_broker::COMMAND_STAT))
+        return Allow();
+      break;
+#endif
 #if defined(__NR_lstat)
     case __NR_lstat:
       if (allowed_command_set_.test(syscall_broker::COMMAND_STAT))
diff --git a/sandbox/policy/linux/bpf_cros_amd_gpu_policy_linux.cc b/sandbox/policy/linux/bpf_cros_amd_gpu_policy_linux.cc
index df2567f7498..42275afc1dc 100644
--- a/sandbox/policy/linux/bpf_cros_amd_gpu_policy_linux.cc
+++ b/sandbox/policy/linux/bpf_cros_amd_gpu_policy_linux.cc
@@ -38,7 +38,7 @@ ResultExpr CrosAmdGpuProcessPolicy::EvaluateSyscall(int sysno) const {
     case __NR_sched_setscheduler:
     case __NR_sysinfo:
     case __NR_uname:
-#if !defined(__aarch64__)
+#if !defined(__aarch64__) && !defined(__loongarch64)
     case __NR_readlink:
     case __NR_stat:
 #endif
diff --git a/sandbox/policy/linux/bpf_gpu_policy_linux.cc b/sandbox/policy/linux/bpf_gpu_policy_linux.cc
index 35ccbb7a7f8..b40cae7a96d 100644
--- a/sandbox/policy/linux/bpf_gpu_policy_linux.cc
+++ b/sandbox/policy/linux/bpf_gpu_policy_linux.cc
@@ -73,7 +73,7 @@ ResultExpr GpuProcessPolicy::EvaluateSyscall(int sysno) const {
     (defined(ARCH_CPU_MIPS_FAMILY) && defined(ARCH_CPU_32_BITS))
     case __NR_ftruncate64:
 #endif
-#if !defined(__aarch64__)
+#if !defined(__aarch64__) && !defined(__loongarch64)
     case __NR_getdents:
 #endif
     case __NR_getdents64:
diff --git a/sandbox/policy/linux/bpf_network_policy_linux.cc b/sandbox/policy/linux/bpf_network_policy_linux.cc
index 482f5a940a8..77e9ddfbab8 100644
--- a/sandbox/policy/linux/bpf_network_policy_linux.cc
+++ b/sandbox/policy/linux/bpf_network_policy_linux.cc
@@ -235,7 +235,7 @@ ResultExpr NetworkProcessPolicy::EvaluateSyscall(int sysno) const {
     case __NR_fdatasync:
     case __NR_fsync:
     case __NR_mremap:
-#if !defined(__aarch64__)
+#if !defined(__aarch64__) && !defined(__loongarch64)
     case __NR_getdents:
 #endif
     case __NR_getdents64:
diff --git a/sandbox/policy/linux/sandbox_linux.cc b/sandbox/policy/linux/sandbox_linux.cc
index 5dbb628a744..a9e0e43a810 100644
--- a/sandbox/policy/linux/sandbox_linux.cc
+++ b/sandbox/policy/linux/sandbox_linux.cc
@@ -551,7 +551,11 @@ bpf_dsl::ResultExpr SandboxLinux::HandleViaBroker(int sysno) const {
   const bpf_dsl::ResultExpr handle_via_broker =
       bpf_dsl::Trap(syscall_broker::BrokerClient::SIGSYS_Handler,
                     broker_process_->GetBrokerClientSignalBased());
+#if defined(__loongarch64)
+  if (sysno == __NR_statx_default) {
+#else
   if (sysno == __NR_fstatat_default) {
+#endif
     // This may be an fstatat(fd, "", stat_buf, AT_EMPTY_PATH), which should be
     // rewritten as fstat(fd, stat_buf). This should be consistent with how the
     // baseline policy handles fstatat().
diff --git a/skia/BUILD.gn b/skia/BUILD.gn
index ea7cfd9e317..1ec46de79f6 100644
--- a/skia/BUILD.gn
+++ b/skia/BUILD.gn
@@ -758,6 +758,8 @@ skia_source_set("skia_opts") {
     # Conditional and empty body needed to avoid assert() below.
   } else if (current_cpu == "riscv64") {
     # Conditional and empty body needed to avoid assert() below.
+  } else if (current_cpu == "loong64") {
+    # Conditional and empty body needed to avoid assert() below.
   } else {
     assert(false, "Unknown cpu target")
   }
diff --git a/third_party/boringssl/src/include/openssl/base.h b/third_party/boringssl/src/include/openssl/base.h
index 80d18a78d8a..0538d3d9520 100644
--- a/third_party/boringssl/src/include/openssl/base.h
+++ b/third_party/boringssl/src/include/openssl/base.h
@@ -107,6 +107,12 @@ extern "C" {
 #define OPENSSL_RISCV64
 #elif defined(__riscv) && __SIZEOF_POINTER__ == 4
 #define OPENSSL_32_BIT
+#elif defined(__loongarch__) && !defined(__loongarch_lp64)
+#define OPENSSL_32_BIT
+#define OPENSSL_LOONGARCH
+#elif defined(__loongarch__) && defined(__loongarch_lp64)
+#define OPENSSL_64_BIT
+#define OPENSSL_LOONGARCH64
 #elif defined(__pnacl__)
 #define OPENSSL_32_BIT
 #define OPENSSL_PNACL
diff --git a/third_party/crashpad/crashpad/compat/linux/sys/ptrace.h b/third_party/crashpad/crashpad/compat/linux/sys/ptrace.h
index 604a46ab06a..0f13e1288df 100644
--- a/third_party/crashpad/crashpad/compat/linux/sys/ptrace.h
+++ b/third_party/crashpad/crashpad/compat/linux/sys/ptrace.h
@@ -38,6 +38,10 @@ static constexpr __ptrace_request PTRACE_GET_THREAD_AREA =
 static constexpr __ptrace_request PTRACE_GET_THREAD_AREA_3264 =
     static_cast<__ptrace_request>(0xc4);
 #define PTRACE_GET_THREAD_AREA_3264 PTRACE_GET_THREAD_AREA_3264
+#elif defined(__loongarch64)
+static constexpr __ptrace_request PTRACE_GET_THREAD_AREA =
+    static_cast<__ptrace_request>(25);
+#define PTRACE_GET_THREAD_AREA PTRACE_GET_THREAD_AREA
 #endif
 #endif  // !PTRACE_GET_THREAD_AREA && !PT_GET_THREAD_AREA && defined(__GLIBC__)
 
diff --git a/third_party/crashpad/crashpad/compat/non_win/winnt.h b/third_party/crashpad/crashpad/compat/non_win/winnt.h
index 5fd78b0d8e0..57a972000ba 100644
--- a/third_party/crashpad/crashpad/compat/non_win/winnt.h
+++ b/third_party/crashpad/crashpad/compat/non_win/winnt.h
@@ -67,6 +67,7 @@
 #define PROCESSOR_ARCHITECTURE_NEUTRAL 11
 #define PROCESSOR_ARCHITECTURE_ARM64 12
 #define PROCESSOR_ARCHITECTURE_ARM32_ON_WIN64 13
+#define PROCESSOR_ARCHITECTURE_LOONGARCH64 14
 #define PROCESSOR_ARCHITECTURE_UNKNOWN 0xffff
 //! \}
 
diff --git a/third_party/crashpad/crashpad/minidump/minidump_context.h b/third_party/crashpad/crashpad/minidump/minidump_context.h
index 30988d8cb6e..586c27ad124 100644
--- a/third_party/crashpad/crashpad/minidump/minidump_context.h
+++ b/third_party/crashpad/crashpad/minidump/minidump_context.h
@@ -637,6 +637,36 @@ struct MinidumpContextMIPS64 {
   uint64_t fir;
 };
 
+//! \brief LOONGARCH64-specifc flags for MinidumpContextLOONGARCH64::context_flags.
+//! Based on minidump_cpu_loongarch64.h from breakpad
+enum MinidumpContextLOONGARCH64Flags : uint32_t {
+  //! \brief Identifies the context structure as LOONGARCH64.
+  kMinidumpContextLOONGARCH64 = 0x00800000,
+
+  //! \brief Indicates the validity of integer registers.
+  //!
+  //! Registers `0`-`31`, `epc` are valid.
+  kMinidumpContextLOONGARCH64Integer = kMinidumpContextLOONGARCH64 | 0x00000002,
+
+  //! \brief Indicates the validity of floating point registers.
+  //!
+  //! Floating point registers `0`-`31`, `fpcsr` and `fir` are valid
+  kMinidumpContextLOONGARCH64FloatingPoint = kMinidumpContextLOONGARCH64 | 0x00000004,
+
+  //! \brief Indicates the validity of all registers.
+  kMinidumpContextLOONGARCH64All = kMinidumpContextLOONGARCH64Integer |
+                              kMinidumpContextLOONGARCH64FloatingPoint,
+};
+
+//! \brief A LOONGARCH64 CPU context (register state) carried in a minidump file.
+struct MinidumpContextLOONGARCH64 {
+  uint32_t context_flags;
+  uint64_t sc_pc;
+  uint64_t sc_regs[32];
+  uint64_t fregs[32];
+  uint64_t fcc;
+  uint32_t fcsr;
+};
 }  // namespace crashpad
 
 #endif  // CRASHPAD_MINIDUMP_MINIDUMP_CONTEXT_H_
diff --git a/third_party/crashpad/crashpad/minidump/minidump_context_writer.cc b/third_party/crashpad/crashpad/minidump/minidump_context_writer.cc
index 5f741ed741e..ce801eca2a1 100644
--- a/third_party/crashpad/crashpad/minidump/minidump_context_writer.cc
+++ b/third_party/crashpad/crashpad/minidump/minidump_context_writer.cc
@@ -102,6 +102,13 @@ MinidumpContextWriter::CreateFromSnapshot(const CPUContext* context_snapshot) {
       break;
     }
 
+    case kCPUArchitectureLOONGARCH64: {
+      context = std::make_unique<MinidumpContextLOONGARCH64Writer>();
+      reinterpret_cast<MinidumpContextLOONGARCH64Writer*>(context.get())
+          ->InitializeFromSnapshot(context_snapshot->loongarch64);
+      break;
+    }
+
     default: {
       LOG(ERROR) << "unknown context architecture "
                  << context_snapshot->architecture;
@@ -556,4 +563,41 @@ size_t MinidumpContextMIPS64Writer::ContextSize() const {
   return sizeof(context_);
 }
 
+MinidumpContextLOONGARCH64Writer::MinidumpContextLOONGARCH64Writer()
+    : MinidumpContextWriter(), context_() {
+  context_.context_flags = kMinidumpContextLOONGARCH64;
+}
+
+MinidumpContextLOONGARCH64Writer::~MinidumpContextLOONGARCH64Writer() = default;
+
+void MinidumpContextLOONGARCH64Writer::InitializeFromSnapshot(
+    const CPUContextLOONGARCH64* context_snapshot) {
+  DCHECK_EQ(state(), kStateMutable);
+  DCHECK_EQ(context_.context_flags, kMinidumpContextLOONGARCH64);
+
+  context_.context_flags = kMinidumpContextLOONGARCH64All;
+
+  static_assert(sizeof(context_.sc_regs) == sizeof(context_snapshot->sc_regs),
+                "GPRs size mismatch");
+  memcpy(context_.sc_regs, context_snapshot->sc_regs, sizeof(context_.sc_regs));
+  context_.sc_pc = context_snapshot->sc_pc;
+
+  static_assert(sizeof(context_.fregs) == sizeof(context_snapshot->fregs),
+                "FPU size mismatch");
+  memcpy(context_.fregs, context_snapshot->fregs, sizeof(context_.fregs));
+  context_.fcsr = context_snapshot->fcsr;
+  context_.fcc = context_snapshot->fcc;
+}
+
+bool MinidumpContextLOONGARCH64Writer::WriteObject(
+    FileWriterInterface* file_writer) {
+  DCHECK_EQ(state(), kStateWritable);
+  return file_writer->Write(&context_, sizeof(context_));
+}
+
+size_t MinidumpContextLOONGARCH64Writer::ContextSize() const {
+  DCHECK_GE(state(), kStateFrozen);
+  return sizeof(context_);
+}
+
 }  // namespace crashpad
diff --git a/third_party/crashpad/crashpad/minidump/minidump_context_writer.h b/third_party/crashpad/crashpad/minidump/minidump_context_writer.h
index 6660be437c9..0a0fd49db9f 100644
--- a/third_party/crashpad/crashpad/minidump/minidump_context_writer.h
+++ b/third_party/crashpad/crashpad/minidump/minidump_context_writer.h
@@ -369,6 +369,44 @@ class MinidumpContextMIPS64Writer final : public MinidumpContextWriter {
   MinidumpContextMIPS64 context_;
 };
 
+//! \brief The writer for a MinidumpContextLOONGARCH64 structure in a minidump file.
+class MinidumpContextLOONGARCH64Writer final : public MinidumpContextWriter {
+ public:
+  MinidumpContextLOONGARCH64Writer();
+  ~MinidumpContextLOONGARCH64Writer() override;
+
+  //! \brief Initializes the MinidumpContextLOONGARCH based on \a context_snapshot.
+  //!
+  //! \param[in] context_snapshot The context snapshot to use as source data.
+  //!
+  //! \note Valid in #kStateMutable. No mutation of context() may be done before
+  //!     calling this method, and it is not normally necessary to alter
+  //!     context() after calling this method.
+  void InitializeFromSnapshot(const CPUContextLOONGARCH64* context_snapshot);
+
+  //! \brief Returns a pointer to the context structure that this object will
+  //!     write.
+  //!
+  //! \attention This returns a non-`const` pointer to this object’s private
+  //!     data so that a caller can populate the context structure directly.
+  //!     This is done because providing setter interfaces to each field in the
+  //!     context structure would be unwieldy and cumbersome. Care must be taken
+  //!     to populate the context structure correctly. The context structure
+  //!     must only be modified while this object is in the #kStateMutable
+  //!     state.
+  MinidumpContextLOONGARCH64* context() { return &context_; }
+
+ protected:
+  // MinidumpWritable:
+  bool WriteObject(FileWriterInterface* file_writer) override;
+
+  // MinidumpContextWriter:
+  size_t ContextSize() const override;
+
+ private:
+  MinidumpContextLOONGARCH64 context_;
+};
+
 }  // namespace crashpad
 
 #endif  // CRASHPAD_MINIDUMP_MINIDUMP_CONTEXT_WRITER_H_
diff --git a/third_party/crashpad/crashpad/minidump/minidump_context_writer_test.cc b/third_party/crashpad/crashpad/minidump/minidump_context_writer_test.cc
index e2a04d1dcf9..f8bb94dfc1a 100644
--- a/third_party/crashpad/crashpad/minidump/minidump_context_writer_test.cc
+++ b/third_party/crashpad/crashpad/minidump/minidump_context_writer_test.cc
@@ -268,6 +268,21 @@ TYPED_TEST(MinidumpContextWriter, MIPS64_FromSnapshot) {
                    TypeParam>(context, ExpectMinidumpContextMIPS64, kSeed);
 }
 
+TYPED_TEST(MinidumpContextWriter, LOONGARCH64_Zeros) {
+  EmptyContextTest<MinidumpContextLOONGARCH64Writer, MinidumpContextLOONGARCH64, TypeParam>(
+      ExpectMinidumpContextLOONGARCH64);
+}
+
+TYPED_TEST(MinidumpContextWriter, LOONGARCH64_FromSnapshot) {
+  constexpr uint32_t kSeed = 64;
+  CPUContextLOONGARCH64 context_loongarch64;
+  CPUContext context;
+  context.loongarch64 = &context_loongarch64;
+  InitializeCPUContextLOONGARCH64(&context, kSeed);
+  FromSnapshotTest<MinidumpContextLOONGARCH64Writer, MinidumpContextLOONGARCH64, TypeParam>(
+      context, ExpectMinidumpContextLOONGARCH64, kSeed);
+}
+
 }  // namespace
 }  // namespace test
 }  // namespace crashpad
diff --git a/third_party/crashpad/crashpad/minidump/minidump_extensions.h b/third_party/crashpad/crashpad/minidump/minidump_extensions.h
index f96cf25b6a4..46351af83bb 100644
--- a/third_party/crashpad/crashpad/minidump/minidump_extensions.h
+++ b/third_party/crashpad/crashpad/minidump/minidump_extensions.h
@@ -154,6 +154,7 @@ enum MinidumpCPUArchitecture : uint16_t {
   kMinidumpCPUArchitectureX86 = PROCESSOR_ARCHITECTURE_INTEL,
 
   kMinidumpCPUArchitectureMIPS = PROCESSOR_ARCHITECTURE_MIPS,
+  kMinidumpCPUArchitectureLOONGARCH64 = PROCESSOR_ARCHITECTURE_LOONGARCH64,
   kMinidumpCPUArchitectureAlpha = PROCESSOR_ARCHITECTURE_ALPHA,
 
   //! \brief 32-bit PowerPC.
diff --git a/third_party/crashpad/crashpad/minidump/minidump_misc_info_writer.cc b/third_party/crashpad/crashpad/minidump/minidump_misc_info_writer.cc
index 133ae3086aa..f6e80fdcc63 100644
--- a/third_party/crashpad/crashpad/minidump/minidump_misc_info_writer.cc
+++ b/third_party/crashpad/crashpad/minidump/minidump_misc_info_writer.cc
@@ -175,6 +175,8 @@ std::string MinidumpMiscInfoDebugBuildString() {
   static constexpr char kCPU[] = "mips";
 #elif defined(ARCH_CPU_MIPS64EL)
   static constexpr char kCPU[] = "mips64";
+#elif defined(ARCH_CPU_LOONG64)
+  static constexpr char kCPU[] = "loongarch64";
 #else
 #error define kCPU for this CPU
 #endif
diff --git a/third_party/crashpad/crashpad/minidump/test/minidump_context_test_util.cc b/third_party/crashpad/crashpad/minidump/test/minidump_context_test_util.cc
index 5746e4c3016..39661ab0a73 100644
--- a/third_party/crashpad/crashpad/minidump/test/minidump_context_test_util.cc
+++ b/third_party/crashpad/crashpad/minidump/test/minidump_context_test_util.cc
@@ -272,6 +272,31 @@ void InitializeMinidumpContextMIPS64(MinidumpContextMIPS64* context,
   context->dsp_control = value++;
 }
 
+void InitializeMinidumpContextLOONGARCH64(MinidumpContextLOONGARCH64* context,
+                                     uint32_t seed) {
+  if (seed == 0) {
+    memset(context, 0, sizeof(*context));
+    context->context_flags = kMinidumpContextLOONGARCH64;
+    return;
+  }
+
+  context->context_flags = kMinidumpContextLOONGARCH64All;
+
+  uint64_t value = seed;
+
+  for (size_t index = 0; index < std::size(context->sc_regs); ++index) {
+    context->sc_regs[index] = value++;
+  }
+
+  context->sc_pc = value++;
+
+  for (size_t index = 0; index < std::size(context->fregs); ++index) {
+    context->fregs[index] = static_cast<double>(value++);
+  }
+  context->fcsr = value++;
+  context->fcc = value++;
+}
+
 namespace {
 
 // Using Google Test assertions, compares |expected| to |observed|. This is
@@ -601,5 +626,26 @@ void ExpectMinidumpContextMIPS64(uint32_t expect_seed,
   EXPECT_EQ(observed->dsp_control, expected.dsp_control);
 }
 
+void ExpectMinidumpContextLOONGARCH64(uint32_t expect_seed,
+                                 const MinidumpContextLOONGARCH64* observed,
+                                 bool snapshot) {
+  MinidumpContextLOONGARCH64 expected;
+  InitializeMinidumpContextLOONGARCH64(&expected, expect_seed);
+
+  EXPECT_EQ(observed->context_flags, expected.context_flags);
+
+  for (size_t index = 0; index < std::size(expected.sc_regs); ++index) {
+    EXPECT_EQ(observed->sc_regs[index], expected.sc_regs[index]);
+  }
+
+  EXPECT_EQ(observed->sc_pc, expected.sc_pc);
+
+  for (size_t index = 0; index < std::size(expected.fregs); ++index) {
+    EXPECT_EQ(observed->fregs[index], expected.fregs[index]);
+  }
+  EXPECT_EQ(observed->fcsr, expected.fcsr);
+  EXPECT_EQ(observed->fcc, expected.fcc);
+}
+
 }  // namespace test
 }  // namespace crashpad
diff --git a/third_party/crashpad/crashpad/minidump/test/minidump_context_test_util.h b/third_party/crashpad/crashpad/minidump/test/minidump_context_test_util.h
index 793e2c39c75..f2fc06808c2 100644
--- a/third_party/crashpad/crashpad/minidump/test/minidump_context_test_util.h
+++ b/third_party/crashpad/crashpad/minidump/test/minidump_context_test_util.h
@@ -47,6 +47,8 @@ void InitializeMinidumpContextARM64(MinidumpContextARM64* context,
 void InitializeMinidumpContextMIPS(MinidumpContextMIPS* context, uint32_t seed);
 void InitializeMinidumpContextMIPS64(MinidumpContextMIPS* context,
                                      uint32_t seed);
+void InitializeMinidumpContextLOONGARCH64(MinidumpContextLOONGARCH64* context,
+                                     uint32_t seed);
 //! \}
 
 //! \brief Verifies, via Google Test assertions, that a context structure
@@ -85,6 +87,9 @@ void ExpectMinidumpContextMIPS(uint32_t expect_seed,
 void ExpectMinidumpContextMIPS64(uint32_t expect_seed,
                                  const MinidumpContextMIPS64* observed,
                                  bool snapshot);
+void ExpectMinidumpContextLOONGARCH64(uint32_t expect_seed,
+                                 const MinidumpContextLOONGARCH64* observed,
+                                 bool snapshot);
 //! \}
 
 }  // namespace test
diff --git a/third_party/crashpad/crashpad/snapshot/BUILD.gn b/third_party/crashpad/crashpad/snapshot/BUILD.gn
index 044f33db5b8..a3f41b86d2f 100644
--- a/third_party/crashpad/crashpad/snapshot/BUILD.gn
+++ b/third_party/crashpad/crashpad/snapshot/BUILD.gn
@@ -468,7 +468,8 @@ source_set("snapshot_test") {
   }
 
   if ((crashpad_is_linux || crashpad_is_android || crashpad_is_fuchsia) &&
-      target_cpu != "mipsel" && target_cpu != "mips64el") {
+      target_cpu != "mipsel" && target_cpu != "mips64el" &&
+      target_cpu != "loongarch64") {
     data_deps += [ ":crashpad_snapshot_test_both_dt_hash_styles" ]
   }
 
@@ -551,7 +552,8 @@ crashpad_loadable_module("crashpad_snapshot_test_module_small") {
 }
 
 if ((crashpad_is_linux || crashpad_is_android || crashpad_is_fuchsia) &&
-    target_cpu != "mipsel" && target_cpu != "mips64el") {
+    target_cpu != "mipsel" && target_cpu != "mips64el" &&
+      target_cpu != "loongarch64") {
   crashpad_loadable_module("crashpad_snapshot_test_both_dt_hash_styles") {
     testonly = true
     sources = [ "hash_types_test.cc" ]
diff --git a/third_party/crashpad/crashpad/snapshot/capture_memory.cc b/third_party/crashpad/crashpad/snapshot/capture_memory.cc
index 0a465d22f60..69df259a39e 100644
--- a/third_party/crashpad/crashpad/snapshot/capture_memory.cc
+++ b/third_party/crashpad/crashpad/snapshot/capture_memory.cc
@@ -117,6 +117,10 @@ void CaptureMemory::PointedToByContext(const CPUContext& context,
   for (size_t i = 0; i < std::size(context.mipsel->regs); ++i) {
     MaybeCaptureMemoryAround(delegate, context.mipsel->regs[i]);
   }
+#elif defined(ARCH_CPU_LOONG64)
+  for (size_t i = 0; i < std::size(context.loongarch64->sc_regs); ++i) {
+    MaybeCaptureMemoryAround(delegate, context.loongarch64->sc_regs[i]);
+  }
 #else
 #error Port.
 #endif
diff --git a/third_party/crashpad/crashpad/snapshot/cpu_architecture.h b/third_party/crashpad/crashpad/snapshot/cpu_architecture.h
index 4003a9290f4..24ca4104b71 100644
--- a/third_party/crashpad/crashpad/snapshot/cpu_architecture.h
+++ b/third_party/crashpad/crashpad/snapshot/cpu_architecture.h
@@ -43,7 +43,10 @@ enum CPUArchitecture {
   kCPUArchitectureMIPSEL,
 
   //! \brief 64-bit MIPSEL.
-  kCPUArchitectureMIPS64EL
+  kCPUArchitectureMIPS64EL,
+
+  //! \brief 64-bit LOONGARCH.
+  kCPUArchitectureLOONGARCH64,
 };
 
 }  // namespace crashpad
diff --git a/third_party/crashpad/crashpad/snapshot/cpu_context.cc b/third_party/crashpad/crashpad/snapshot/cpu_context.cc
index 6eaa853fd57..0c07e75529f 100644
--- a/third_party/crashpad/crashpad/snapshot/cpu_context.cc
+++ b/third_party/crashpad/crashpad/snapshot/cpu_context.cc
@@ -170,6 +170,8 @@ uint64_t CPUContext::InstructionPointer() const {
       return arm->pc;
     case kCPUArchitectureARM64:
       return arm64->pc;
+    case kCPUArchitectureLOONGARCH64:
+      return loongarch64->sc_pc;
     default:
       NOTREACHED();
       return ~0ull;
@@ -186,6 +188,8 @@ uint64_t CPUContext::StackPointer() const {
       return arm->sp;
     case kCPUArchitectureARM64:
       return arm64->sp;
+    case kCPUArchitectureLOONGARCH64:
+      return loongarch64->sc_regs[3];
     default:
       NOTREACHED();
       return ~0ull;
@@ -226,6 +230,7 @@ bool CPUContext::Is64Bit() const {
     case kCPUArchitectureX86_64:
     case kCPUArchitectureARM64:
     case kCPUArchitectureMIPS64EL:
+    case kCPUArchitectureLOONGARCH64:
       return true;
     case kCPUArchitectureX86:
     case kCPUArchitectureARM:
diff --git a/third_party/crashpad/crashpad/snapshot/cpu_context.h b/third_party/crashpad/crashpad/snapshot/cpu_context.h
index 7bc252be15c..e92fbc8c52c 100644
--- a/third_party/crashpad/crashpad/snapshot/cpu_context.h
+++ b/third_party/crashpad/crashpad/snapshot/cpu_context.h
@@ -362,6 +362,15 @@ struct CPUContextMIPS64 {
   uint64_t fir;
 };
 
+//! \brief A context structure carrying LOONGARCH64 CPU state.
+struct CPUContextLOONGARCH64 {
+  uint64_t sc_pc;
+  uint64_t sc_regs[32];
+  uint64_t fregs[32];
+  uint64_t fcc;
+  uint32_t fcsr;
+};
+
 //! \brief A context structure capable of carrying the context of any supported
 //!     CPU architecture.
 struct CPUContext {
@@ -402,6 +411,7 @@ struct CPUContext {
     CPUContextARM64* arm64;
     CPUContextMIPS* mipsel;
     CPUContextMIPS64* mips64;
+    CPUContextLOONGARCH64* loongarch64;
   };
 };
 
diff --git a/third_party/crashpad/crashpad/snapshot/elf/elf_image_reader.cc b/third_party/crashpad/crashpad/snapshot/elf/elf_image_reader.cc
index 30e8b987c07..8933b6fa3ee 100644
--- a/third_party/crashpad/crashpad/snapshot/elf/elf_image_reader.cc
+++ b/third_party/crashpad/crashpad/snapshot/elf/elf_image_reader.cc
@@ -593,6 +593,7 @@ bool ElfImageReader::ReadDynamicStringTableAtOffset(VMSize offset,
     return false;
   }
 
+#if !defined(__loongarch64)
   // GNU ld.so doesn't adjust the vdso's dynamic array entries by the load bias.
   // If the address is too small to point into the loaded module range and is
   // small enough to be an offset from the base of the module, adjust it now.
@@ -600,6 +601,11 @@ bool ElfImageReader::ReadDynamicStringTableAtOffset(VMSize offset,
       string_table_address < memory_.Size()) {
     string_table_address += GetLoadBias();
   }
+#else
+  // LoongArch ABI specifies that the dynamic section has to be read-only.
+  // See glibc: sysdeps/loongarch/ldsodefs.h
+  string_table_address += GetLoadBias();
+#endif
 
   if (!memory_.ReadCStringSizeLimited(
           string_table_address + offset, string_table_size - offset, string)) {
@@ -754,6 +760,10 @@ bool ElfImageReader::GetNumberOfSymbolEntriesFromDtHash(
     return false;
   }
 
+#if defined(__loongarch64)
+  dt_hash_address += GetLoadBias();
+#endif
+
   struct {
     uint32_t nbucket;
     uint32_t nchain;
@@ -779,6 +789,10 @@ bool ElfImageReader::GetNumberOfSymbolEntriesFromDtGnuHash(
     return false;
   }
 
+#if defined(__loongarch64)
+  dt_gnu_hash_address += GetLoadBias();
+#endif
+
   // See https://flapenguin.me/2017/05/10/elf-lookup-dt-gnu-hash/ and
   // https://sourceware.org/ml/binutils/2006-10/msg00377.html.
   struct {
diff --git a/third_party/crashpad/crashpad/snapshot/elf/elf_symbol_table_reader.cc b/third_party/crashpad/crashpad/snapshot/elf/elf_symbol_table_reader.cc
index 4c59d745994..3af0950c933 100644
--- a/third_party/crashpad/crashpad/snapshot/elf/elf_symbol_table_reader.cc
+++ b/third_party/crashpad/crashpad/snapshot/elf/elf_symbol_table_reader.cc
@@ -72,16 +72,25 @@ bool ElfSymbolTableReader::ScanSymbolTable(const std::string& name,
   SymEnt entry;
   std::string string;
   size_t i = 0;
+  const char vdso_prefix[] = "__vdso_";
+
+#if defined(__loongarch64)
+  address += elf_reader_->GetLoadBias();
+#endif
+
   while (i < num_entries_ && memory_->Read(address, sizeof(entry), &entry)) {
-    if (elf_reader_->ReadDynamicStringTableAtOffset(entry.st_name, &string) &&
-        string == name) {
-      info_out->address = entry.st_value;
-      info_out->size = entry.st_size;
-      info_out->shndx = entry.st_shndx;
-      info_out->binding = GetBinding(entry);
-      info_out->type = GetType(entry);
-      info_out->visibility = GetVisibility(entry);
-      return true;
+    if (elf_reader_->ReadDynamicStringTableAtOffset(entry.st_name, &string)) {
+      if (string.find(vdso_prefix) == 0)
+        string.erase(0, sizeof(vdso_prefix) - 1);
+      if (string == name) {
+        info_out->address = entry.st_value;
+        info_out->size = entry.st_size;
+        info_out->shndx = entry.st_shndx;
+        info_out->binding = GetBinding(entry);
+        info_out->type = GetType(entry);
+        info_out->visibility = GetVisibility(entry);
+        return true;
+      }
     }
     // TODO(scottmg): This should respect DT_SYMENT if present.
     address += sizeof(entry);
diff --git a/third_party/crashpad/crashpad/snapshot/linux/cpu_context_linux.cc b/third_party/crashpad/crashpad/snapshot/linux/cpu_context_linux.cc
index 21db2343240..6194cb5840d 100644
--- a/third_party/crashpad/crashpad/snapshot/linux/cpu_context_linux.cc
+++ b/third_party/crashpad/crashpad/snapshot/linux/cpu_context_linux.cc
@@ -265,7 +265,31 @@ void InitializeCPUContextARM64_OnlyFPSIMD(
   context->fpsr = float_context.fpsr;
   context->fpcr = float_context.fpcr;
 }
+#elif defined(ARCH_CPU_LOONG64)
+void InitializeCPUContextLOONGARCH64(const ThreadContext::t64_t& thread_context,
+                               const FloatContext::f64_t& float_context,
+                               CPUContextLOONGARCH64* context) {
+  InitializeCPUContextLOONGARCH64_NoFloatingPoint(thread_context, context);
+
+  static_assert(sizeof(context->fregs) == sizeof(float_context.fregs),
+                "fpu context size mismatch");
+  memcpy(context->fregs, float_context.fregs, sizeof(context->fregs));
+  context->fcc = float_context.fcc;
+  context->fcsr = float_context.fcsr;
+}
+
+void InitializeCPUContextLOONGARCH64_NoFloatingPoint(
+    const ThreadContext::t64_t& thread_context,
+    CPUContextLOONGARCH64* context) {
+  static_assert(sizeof(context->sc_regs) == sizeof(thread_context.regs),
+                "gpr context size mismtach");
+  memcpy(context->sc_regs, thread_context.regs, sizeof(context->sc_regs));
+  context->sc_pc = thread_context.csr_era;
 
+  memset(&context->fregs, 0, sizeof(context->fregs));
+  context->fcc = 0;
+  context->fcsr = 0;
+}
 #endif  // ARCH_CPU_X86_FAMILY
 
 }  // namespace internal
diff --git a/third_party/crashpad/crashpad/snapshot/linux/cpu_context_linux.h b/third_party/crashpad/crashpad/snapshot/linux/cpu_context_linux.h
index 1ea5eecda68..6395c6c9099 100644
--- a/third_party/crashpad/crashpad/snapshot/linux/cpu_context_linux.h
+++ b/third_party/crashpad/crashpad/snapshot/linux/cpu_context_linux.h
@@ -174,6 +174,30 @@ void InitializeCPUContextMIPS(
 
 #endif  // ARCH_CPU_MIPS_FAMILY || DOXYGEN
 
+#if defined(ARCH_CPU_LOONG64) || DOXYGEN
+//! \brief Initializes a CPUContextARM64 structure from native context
+//!     structures on Linux.
+//!
+//! \param[in] thread_context The native thread context.
+//! \param[in] float_context The native float context.
+//! \param[out] context The CPUContextARM64 structure to initialize.
+void InitializeCPUContextLOONGARCH64(const ThreadContext::t64_t& thread_context,
+                               const FloatContext::f64_t& float_context,
+                               CPUContextLOONGARCH64* context);
+
+//! \brief Initializes GPR state in a CPUContextARM64 from a native context
+//!     structure on Linux.
+//!
+//! Floating point state is initialized to zero.
+//!
+//! \param[in] thread_context The native thread context.
+//! \param[out] context The CPUContextARM64 structure to initialize.
+void InitializeCPUContextLOONGARCH64_NoFloatingPoint(
+    const ThreadContext::t64_t& thread_context,
+    CPUContextLOONGARCH64* context);
+
+#endif  // ARCH_CPU_LOONG64 || DOXYGEN
+
 }  // namespace internal
 }  // namespace crashpad
 
diff --git a/third_party/crashpad/crashpad/snapshot/linux/exception_snapshot_linux.cc b/third_party/crashpad/crashpad/snapshot/linux/exception_snapshot_linux.cc
index 4e6ec11f8bd..abbee169d4b 100644
--- a/third_party/crashpad/crashpad/snapshot/linux/exception_snapshot_linux.cc
+++ b/third_party/crashpad/crashpad/snapshot/linux/exception_snapshot_linux.cc
@@ -325,6 +325,78 @@ bool ExceptionSnapshotLinux::ReadContext<ContextTraits64>(
       reader, context_address, context_.mips64);
 }
 
+#elif defined(ARCH_CPU_LOONG64)
+
+template <typename Traits>
+static bool ReadContext(ProcessReaderLinux* reader,
+                        LinuxVMAddress context_address,
+                        typename Traits::CPUContext* dest_context) {
+  const ProcessMemory* memory = reader->Memory();
+
+  LinuxVMAddress gregs_address = context_address +
+                                 offsetof(UContext<Traits>, mcontext) +
+                                 offsetof(typename Traits::MContext, gregs);
+
+  typename Traits::SignalThreadContext thread_context;
+  if (!memory->Read(gregs_address, sizeof(thread_context), &thread_context)) {
+    LOG(ERROR) << "Couldn't read gregs";
+    return false;
+  }
+
+  LinuxVMAddress reserved_address =
+      context_address + offsetof(typename Traits::MContext, sc_extcontext);
+  if ((reserved_address & 15) != 0) {
+    LOG(ERROR) << "invalid alignment 0x" << std::hex << reserved_address;
+    return false;
+  }
+
+  constexpr VMSize kMaxContextSpace = 4096;
+
+  ProcessMemoryRange range;
+  if (!range.Initialize(memory, true, reserved_address, kMaxContextSpace)) {
+    return false;
+  }
+
+  do {
+    SCTXInfo sctx;
+    if (!range.Read(reserved_address, sizeof(sctx), &sctx)) {
+      LOG(ERROR) << "missing context sctx";
+      return false;
+    }
+
+    switch (sctx.magic) {
+      case FPU_CTX_MAGIC:
+        FPUContext fpu;
+        if (!range.Read(reserved_address, sizeof(fpu), &fpu)) {
+          LOG(ERROR) << "Couldn't read fpu " << sctx.size;
+          return false;
+        }
+        return true;
+      case 0:
+        LOG(WARNING) << "fpu not found";
+        return true;
+
+      default:
+        LOG(ERROR) << "invalid magic number 0x" << std::hex << sctx.magic;
+        return false;
+    }
+  } while (true);
+
+  return true;
+
+}
+
+template <>
+bool ExceptionSnapshotLinux::ReadContext<ContextTraits64>(
+    ProcessReaderLinux* reader,
+    LinuxVMAddress context_address) {
+  context_.architecture = kCPUArchitectureLOONGARCH64;
+  context_.loongarch64 = &context_union_.loongarch64;
+
+  return internal::ReadContext<ContextTraits64>(
+      reader, context_address, context_.loongarch64);
+}
+
 #endif  // ARCH_CPU_X86_FAMILY
 
 bool ExceptionSnapshotLinux::Initialize(
@@ -354,12 +426,15 @@ bool ExceptionSnapshotLinux::Initialize(
         !ReadSiginfo<Traits64>(process_reader, siginfo_address)) {
       return false;
     }
-  } else {
+  }
+#if !defined(ARCH_CPU_LOONG64)
+  else {
     if (!ReadContext<ContextTraits32>(process_reader, context_address) ||
         !ReadSiginfo<Traits32>(process_reader, siginfo_address)) {
       return false;
     }
   }
+#endif
 
   CaptureMemoryDelegateLinux capture_memory_delegate(
       process_reader,
diff --git a/third_party/crashpad/crashpad/snapshot/linux/exception_snapshot_linux.h b/third_party/crashpad/crashpad/snapshot/linux/exception_snapshot_linux.h
index 3ea3d931fe0..a1aac0a32f2 100644
--- a/third_party/crashpad/crashpad/snapshot/linux/exception_snapshot_linux.h
+++ b/third_party/crashpad/crashpad/snapshot/linux/exception_snapshot_linux.h
@@ -89,6 +89,8 @@ class ExceptionSnapshotLinux final : public ExceptionSnapshot {
 #elif defined(ARCH_CPU_MIPS_FAMILY)
     CPUContextMIPS mipsel;
     CPUContextMIPS64 mips64;
+#elif defined(ARCH_CPU_LOONG64)
+    CPUContextLOONGARCH64 loongarch64;
 #endif
   } context_union_;
   CPUContext context_;
diff --git a/third_party/crashpad/crashpad/snapshot/linux/exception_snapshot_linux_test.cc b/third_party/crashpad/crashpad/snapshot/linux/exception_snapshot_linux_test.cc
index b0c75b98a06..3f83a21348f 100644
--- a/third_party/crashpad/crashpad/snapshot/linux/exception_snapshot_linux_test.cc
+++ b/third_party/crashpad/crashpad/snapshot/linux/exception_snapshot_linux_test.cc
@@ -297,6 +297,48 @@ void ExpectContext(const CPUContext& actual, const NativeCPUContext& expected) {
             0);
 #undef CPU_ARCH_NAME
 }
+#elif defined(ARCH_CPU_LOONG64)
+using NativeCPUContext = ucontext_t;
+struct TestCoprocessorContext {
+  sctx_info sctx;
+  fpu_context fpu;
+};
+
+void InitializeContext(NativeCPUContext* context) {
+  context->uc_mcontext.__pc = 1;
+  for (size_t reg = 0; reg < std::size(context->uc_mcontext.__gregs); ++reg) {
+    context->uc_mcontext.__gregs[reg] = reg;
+  }
+
+auto test_context = reinterpret_cast<TestCoprocessorContext*>(
+      context->uc_mcontext.__extcontext);
+  test_context->sctx.magic = 0;
+  test_context->sctx.size = 0;;
+
+  for (size_t reg = 0; reg < std::size(test_context->fpu.regs); ++reg) {
+    test_context->fpu.regs[reg] = reg;
+
+  test_context->fpu.fcc = 1;
+  test_context->fpu.fcsr = 2;
+  }
+}
+
+void ExpectContext(const CPUContext& actual, const NativeCPUContext& expected) {
+  EXPECT_EQ(actual.architecture, kCPUArchitectureLOONGARCH64);
+
+  auto test_context = reinterpret_cast< const TestCoprocessorContext*>(
+       expected.uc_mcontext.__extcontext);
+  for (size_t reg = 0; reg < std::size(expected.uc_mcontext.__gregs); ++reg) {
+    EXPECT_EQ(actual.loongarch64->sc_regs[reg], expected.uc_mcontext.__gregs[reg]);
+  }
+
+  EXPECT_EQ(memcmp(&actual.loongarch64->fregs,
+                   &test_context->fpu.regs,
+                   sizeof(actual.loongarch64->fregs)),
+            0);
+  EXPECT_EQ(actual.loongarch64->fcc, test_context->fpu.fcc);
+  EXPECT_EQ(actual.loongarch64->fcsr, test_context->fpu.fcsr);
+}
 
 #else
 #error Port.
diff --git a/third_party/crashpad/crashpad/snapshot/linux/process_reader_linux.cc b/third_party/crashpad/crashpad/snapshot/linux/process_reader_linux.cc
index 8ec0edc6dab..855eeeead02 100644
--- a/third_party/crashpad/crashpad/snapshot/linux/process_reader_linux.cc
+++ b/third_party/crashpad/crashpad/snapshot/linux/process_reader_linux.cc
@@ -127,6 +127,8 @@ void ProcessReaderLinux::Thread::InitializeStack(ProcessReaderLinux* reader) {
 #elif defined(ARCH_CPU_MIPS_FAMILY)
   stack_pointer = reader->Is64Bit() ? thread_info.thread_context.t64.regs[29]
                                     : thread_info.thread_context.t32.regs[29];
+#elif defined(ARCH_CPU_LOONG64)
+  stack_pointer = thread_info.thread_context.t64.regs[3];
 #else
 #error Port.
 #endif
diff --git a/third_party/crashpad/crashpad/snapshot/linux/signal_context.h b/third_party/crashpad/crashpad/snapshot/linux/signal_context.h
index 6ac7adea478..1fa9747d3b6 100644
--- a/third_party/crashpad/crashpad/snapshot/linux/signal_context.h
+++ b/third_party/crashpad/crashpad/snapshot/linux/signal_context.h
@@ -420,8 +420,45 @@ static_assert(offsetof(UContext<ContextTraits64>, mcontext.gregs) ==
 static_assert(offsetof(UContext<ContextTraits64>, mcontext.fpregs) ==
                   offsetof(ucontext_t, uc_mcontext.fpregs),
               "context offset mismatch");
-#endif
+#endif // ARCH_CPU_MIPSEL
+
+#elif defined(ARCH_CPU_LOONG64)
+
+struct MContext64 {
+  uint64_t sc_pc;
+  uint64_t gregs[32];
+  uint32_t sc_flags;
+  uint64_t sc_extcontext[0] __attribute__((__aligned__(16)));
+};
+
+struct SCTXInfo {
+  uint32_t magic;
+  uint32_t size;
+  uint64_t padding;
+};
+
+struct FPUContext {
+  uint64_t regs[32];
+  uint64_t fcc;
+  uint32_t fcsr;
+};
+
+struct ContextTraits64 : public Traits64 {
+  using MContext = MContext64;
+  using SignalThreadContext = ThreadContext::t64_t;
+  using SignalFloatContext = FloatContext::f64_t;
+  using CPUContext = CPUContextLOONGARCH64;
+};
 
+template <typename Traits>
+struct UContext {
+  typename Traits::ULong flags;
+  typename Traits::Address link;
+  SignalStack<Traits> stack;
+  Sigset<Traits> sigmask;
+  char padding[128 - sizeof(sigmask)];
+  typename Traits::MContext mcontext;
+};
 #else
 #error Port.
 #endif  // ARCH_CPU_X86_FAMILY
diff --git a/third_party/crashpad/crashpad/snapshot/linux/system_snapshot_linux.cc b/third_party/crashpad/crashpad/snapshot/linux/system_snapshot_linux.cc
index 84871551018..fe9a07a41d2 100644
--- a/third_party/crashpad/crashpad/snapshot/linux/system_snapshot_linux.cc
+++ b/third_party/crashpad/crashpad/snapshot/linux/system_snapshot_linux.cc
@@ -205,6 +205,8 @@ CPUArchitecture SystemSnapshotLinux::GetCPUArchitecture() const {
 #elif defined(ARCH_CPU_MIPS_FAMILY)
   return process_reader_->Is64Bit() ? kCPUArchitectureMIPS64EL
                                     : kCPUArchitectureMIPSEL;
+#elif defined(ARCH_CPU_LOONG64)
+  return kCPUArchitectureLOONGARCH64;
 #else
 #error port to your architecture
 #endif
@@ -220,6 +222,9 @@ uint32_t SystemSnapshotLinux::CPURevision() const {
 #elif defined(ARCH_CPU_MIPS_FAMILY)
   // Not implementable on MIPS
   return 0;
+#elif defined(ARCH_CPU_LOONG64)
+  // Not implementable on LOONGARCH64
+  return 0;
 #else
 #error port to your architecture
 #endif
@@ -240,6 +245,9 @@ std::string SystemSnapshotLinux::CPUVendor() const {
 #elif defined(ARCH_CPU_MIPS_FAMILY)
   // Not implementable on MIPS
   return std::string();
+#elif defined(ARCH_CPU_LOONG64)
+  // Not implementable on LOONGARCH64
+  return std::string();
 #else
 #error port to your architecture
 #endif
@@ -373,6 +381,9 @@ bool SystemSnapshotLinux::NXEnabled() const {
 #elif defined(ARCH_CPU_MIPS_FAMILY)
   // Not implementable on MIPS
   return false;
+#elif defined(ARCH_CPU_LOONG64)
+  // Not implementable on LOONGARCH64
+  return false;
 #else
 #error Port.
 #endif  // ARCH_CPU_X86_FAMILY
diff --git a/third_party/crashpad/crashpad/snapshot/linux/test_modules.cc b/third_party/crashpad/crashpad/snapshot/linux/test_modules.cc
index 7d9d08d2ed4..2ddd6a5b131 100644
--- a/third_party/crashpad/crashpad/snapshot/linux/test_modules.cc
+++ b/third_party/crashpad/crashpad/snapshot/linux/test_modules.cc
@@ -110,6 +110,10 @@ bool WriteTestModule(const base::FilePath& module_path,
   module.ehdr.e_machine = EM_AARCH64;
 #elif defined(ARCH_CPU_MIPSEL) || defined(ARCH_CPU_MIPS64EL)
   module.ehdr.e_machine = EM_MIPS;
+#elif defined(ARCH_CPU_LOONG64)
+  module.ehdr.e_machine = EM_LOONGARCH;
+  module.ehdr.e_flags |= EF_LARCH_ABI_DOUBLE_FLOAT;
+  module.ehdr.e_flags |= EF_LARCH_OBJABI_V1;
 #endif
 
   module.ehdr.e_version = EV_CURRENT;
diff --git a/third_party/crashpad/crashpad/snapshot/linux/thread_snapshot_linux.cc b/third_party/crashpad/crashpad/snapshot/linux/thread_snapshot_linux.cc
index ba334010936..3b290b5b656 100644
--- a/third_party/crashpad/crashpad/snapshot/linux/thread_snapshot_linux.cc
+++ b/third_party/crashpad/crashpad/snapshot/linux/thread_snapshot_linux.cc
@@ -190,6 +190,12 @@ bool ThreadSnapshotLinux::Initialize(
         thread.thread_info.float_context.f32,
         context_.mipsel);
   }
+#elif defined(ARCH_CPU_LOONG64)
+  context_.architecture = kCPUArchitectureLOONGARCH64;
+  context_.loongarch64 = &context_union_.loongarch64;
+  InitializeCPUContextLOONGARCH64(thread.thread_info.thread_context.t64,
+				  thread.thread_info.float_context.f64,
+				  context_.loongarch64);
 #else
 #error Port.
 #endif
diff --git a/third_party/crashpad/crashpad/snapshot/linux/thread_snapshot_linux.h b/third_party/crashpad/crashpad/snapshot/linux/thread_snapshot_linux.h
index bd03f58200c..2375f3c9711 100644
--- a/third_party/crashpad/crashpad/snapshot/linux/thread_snapshot_linux.h
+++ b/third_party/crashpad/crashpad/snapshot/linux/thread_snapshot_linux.h
@@ -74,6 +74,8 @@ class ThreadSnapshotLinux final : public ThreadSnapshot {
 #elif defined(ARCH_CPU_MIPS_FAMILY)
     CPUContextMIPS mipsel;
     CPUContextMIPS64 mips64;
+#elif defined(ARCH_CPU_LOONG64)
+    CPUContextLOONGARCH64 loongarch64;
 #else
 #error Port.
 #endif  // ARCH_CPU_X86_FAMILY
diff --git a/third_party/crashpad/crashpad/snapshot/minidump/minidump_context_converter.cc b/third_party/crashpad/crashpad/snapshot/minidump/minidump_context_converter.cc
index f2fa2ab37ab..9b749a5f10f 100644
--- a/third_party/crashpad/crashpad/snapshot/minidump/minidump_context_converter.cc
+++ b/third_party/crashpad/crashpad/snapshot/minidump/minidump_context_converter.cc
@@ -266,6 +266,28 @@ bool MinidumpContextConverter::Initialize(
     context_.mips64->fir = src->fir;
 
     memcpy(&context_.mips64->fpregs, &src->fpregs, sizeof(src->fpregs));
+  } else if (context_.architecture ==
+             CPUArchitecture::kCPUArchitectureLOONGARCH64) {
+    context_memory_.resize(sizeof(CPUContextLOONGARCH64));
+    context_.loongarch64 =
+        reinterpret_cast<CPUContextLOONGARCH64*>(context_memory_.data());
+    const MinidumpContextLOONGARCH64* src =
+        reinterpret_cast<const MinidumpContextLOONGARCH64*>(minidump_context.data());
+    if (minidump_context.size() < sizeof(MinidumpContextLOONGARCH64)) {
+      return false;
+    }
+
+    if (!(src->context_flags & kMinidumpContextLOONGARCH64)) {
+      return false;
+    }
+
+    for (size_t i = 0; i < std::size(src->sc_regs); i++) {
+      context_.loongarch64->sc_regs[i] = src->sc_regs[i];
+    }
+
+    context_.loongarch64->sc_pc = src->sc_pc;
+    context_.loongarch64->fcsr = src->fcsr;
+    context_.loongarch64->fcc = src->fcc;
   } else {
     // Architecture is listed as "unknown".
     DLOG(ERROR) << "Unknown architecture";
diff --git a/third_party/crashpad/crashpad/snapshot/minidump/system_snapshot_minidump.cc b/third_party/crashpad/crashpad/snapshot/minidump/system_snapshot_minidump.cc
index abccda31872..89c53424256 100644
--- a/third_party/crashpad/crashpad/snapshot/minidump/system_snapshot_minidump.cc
+++ b/third_party/crashpad/crashpad/snapshot/minidump/system_snapshot_minidump.cc
@@ -68,7 +68,8 @@ CPUArchitecture SystemSnapshotMinidump::GetCPUArchitecture() const {
     case kMinidumpCPUArchitectureMIPS:
       return kCPUArchitectureMIPSEL;
     // No word on how MIPS64 is signalled
-
+    case kMinidumpCPUArchitectureLOONGARCH64:
+      return kCPUArchitectureLOONGARCH64;
     default:
       return CPUArchitecture::kCPUArchitectureUnknown;
   }
diff --git a/third_party/crashpad/crashpad/snapshot/test/test_cpu_context.cc b/third_party/crashpad/crashpad/snapshot/test/test_cpu_context.cc
index 7efbf5af866..37514de12c0 100644
--- a/third_party/crashpad/crashpad/snapshot/test/test_cpu_context.cc
+++ b/third_party/crashpad/crashpad/snapshot/test/test_cpu_context.cc
@@ -295,5 +295,25 @@ void InitializeCPUContextMIPS64(CPUContext* context, uint32_t seed) {
   mips64->dsp_control = value++;
 }
 
+void InitializeCPUContextLOONGARCH64(CPUContext* context, uint32_t seed) {
+  context->architecture = kCPUArchitectureLOONGARCH64;
+  CPUContextLOONGARCH64* loongarch64 = context->loongarch64;
+
+  if (seed == 0) {
+    memset(loongarch64, 0, sizeof(*loongarch64));
+    return;
+  }
+
+  uint64_t value = seed;
+
+  for (size_t index = 0; index < std::size(loongarch64->fregs); ++index) {
+    loongarch64->fregs[index] = value++;
+  }
+
+  loongarch64->sc_pc = value++;
+  loongarch64->fcsr = value++;
+  loongarch64->fcc = value++;
+}
+
 }  // namespace test
 }  // namespace crashpad
diff --git a/third_party/crashpad/crashpad/snapshot/test/test_cpu_context.h b/third_party/crashpad/crashpad/snapshot/test/test_cpu_context.h
index e4372ceed8e..ed5af67138e 100644
--- a/third_party/crashpad/crashpad/snapshot/test/test_cpu_context.h
+++ b/third_party/crashpad/crashpad/snapshot/test/test_cpu_context.h
@@ -63,6 +63,7 @@ void InitializeCPUContextARM(CPUContext* context, uint32_t seed);
 void InitializeCPUContextARM64(CPUContext* context, uint32_t seed);
 void InitializeCPUContextMIPS(CPUContext* context, uint32_t seed);
 void InitializeCPUContextMIPS64(CPUContext* context, uint32_t seed);
+void InitializeCPUContextLOONGARCH64(CPUContext* context, uint32_t seed);
 //! \}
 
 }  // namespace test
diff --git a/third_party/crashpad/crashpad/test/linux/get_tls.cc b/third_party/crashpad/crashpad/test/linux/get_tls.cc
index c8147f0dfb2..4d37fd54b53 100644
--- a/third_party/crashpad/crashpad/test/linux/get_tls.cc
+++ b/third_party/crashpad/crashpad/test/linux/get_tls.cc
@@ -49,6 +49,9 @@ LinuxVMAddress GetTLS() {
       : "=r"(tls)
       :
       : "$3");
+#elif defined(ARCH_CPU_LOONG64)
+  asm("move    %0,$tp\n\t"
+      : "=r"(tls) ::);
 #else
 #error Port.
 #endif  // ARCH_CPU_ARMEL
diff --git a/third_party/crashpad/crashpad/test/multiprocess_posix.cc b/third_party/crashpad/crashpad/test/multiprocess_posix.cc
index eb7cf9cd15c..9b7a610b06d 100644
--- a/third_party/crashpad/crashpad/test/multiprocess_posix.cc
+++ b/third_party/crashpad/crashpad/test/multiprocess_posix.cc
@@ -162,7 +162,8 @@ void Multiprocess::SetExpectedChildTermination(TerminationReason reason,
 }
 
 void Multiprocess::SetExpectedChildTerminationBuiltinTrap() {
-#if defined(ARCH_CPU_ARM64) || defined(ARCH_CPU_MIPS_FAMILY)
+#if defined(ARCH_CPU_ARM64) || defined(ARCH_CPU_MIPS_FAMILY) ||\
+    defined (ARCH_CPU_LOONG64)
   SetExpectedChildTermination(kTerminationSignal, SIGTRAP);
 #else
   SetExpectedChildTermination(kTerminationSignal, SIGILL);
diff --git a/third_party/crashpad/crashpad/util/linux/ptracer.cc b/third_party/crashpad/crashpad/util/linux/ptracer.cc
index 25c89ea95c6..f59a4597299 100644
--- a/third_party/crashpad/crashpad/util/linux/ptracer.cc
+++ b/third_party/crashpad/crashpad/util/linux/ptracer.cc
@@ -398,6 +398,54 @@ bool GetThreadArea64(pid_t tid,
   return true;
 }
 
+#elif defined(ARCH_CPU_LOONG64)
+
+bool GetFloatingPointRegisters32(pid_t tid,
+                                 FloatContext* context,
+                                 bool can_log) {
+  return false;
+}
+
+bool GetFloatingPointRegisters64(pid_t tid,
+                                 FloatContext* context,
+                                 bool can_log) {
+  iovec iov;
+  iov.iov_base = context;
+  iov.iov_len = sizeof(*context);
+  if (ptrace(PTRACE_GETREGSET, tid, reinterpret_cast<void*>(NT_PRFPREG), &iov) != 0) {
+    PLOG_IF(ERROR, can_log) << "ptrace";
+    return false;
+  }
+  if (iov.iov_len != sizeof(context->f64)) {
+    LOG_IF(ERROR, can_log) << "Unexpected registers size " << iov.iov_len
+                           << " != " << sizeof(context->f64);
+    return false;
+  }
+
+  return true;
+}
+
+bool GetThreadArea32(pid_t tid,
+                     const ThreadContext& context,
+                     LinuxVMAddress* address,
+                     bool can_log) {
+  return false;
+}
+
+bool GetThreadArea64(pid_t tid,
+                     const ThreadContext& context,
+                     LinuxVMAddress* address,
+                     bool can_log) {
+  void* result;
+
+  if (ptrace(PTRACE_GET_THREAD_AREA, tid, nullptr, &result) != 0) {
+    PLOG_IF(ERROR, can_log) << "ptrace";
+    return false;
+  }
+  *address = FromPointerCast<LinuxVMAddress>(result);
+  return true;
+}
+
 #else
 #error Port.
 #endif  // ARCH_CPU_X86_FAMILY
diff --git a/third_party/crashpad/crashpad/util/linux/thread_info.h b/third_party/crashpad/crashpad/util/linux/thread_info.h
index 9f60bd3ebe3..88809f57a97 100644
--- a/third_party/crashpad/crashpad/util/linux/thread_info.h
+++ b/third_party/crashpad/crashpad/util/linux/thread_info.h
@@ -80,6 +80,8 @@ union ThreadContext {
     uint32_t cp0_status;
     uint32_t cp0_cause;
     uint32_t padding1_;
+#elif defined(ARCH_CPU_LOONG64)
+    // Nothing.
 #else
 #error Port.
 #endif  // ARCH_CPU_X86_FAMILY
@@ -133,6 +135,11 @@ union ThreadContext {
     uint64_t cp0_badvaddr;
     uint64_t cp0_status;
     uint64_t cp0_cause;
+#elif defined(ARCH_CPU_LOONG64)
+    // Reflects user_regs_struct in sys/user.h.
+    uint64_t regs[32];
+    uint64_t csr_era;
+    uint64_t _pad[12];
 #else
 #error Port.
 #endif  // ARCH_CPU_X86_FAMILY
@@ -142,13 +149,13 @@ union ThreadContext {
   using NativeThreadContext = user_regs_struct;
 #elif defined(ARCH_CPU_ARMEL)
   using NativeThreadContext = user_regs;
-#elif defined(ARCH_CPU_MIPS_FAMILY)
+#elif defined(ARCH_CPU_MIPS_FAMILY) || defined (ARCH_CPU_LOONG64)
 // No appropriate NativeThreadsContext type available for MIPS
 #else
 #error Port.
 #endif  // ARCH_CPU_X86_FAMILY || ARCH_CPU_ARM64
 
-#if !defined(ARCH_CPU_MIPS_FAMILY)
+#if !defined(ARCH_CPU_MIPS_FAMILY) && !defined(ARCH_CPU_LOONG64)
 #if defined(ARCH_CPU_32_BITS)
   static_assert(sizeof(t32_t) == sizeof(NativeThreadContext), "Size mismatch");
 #else  // ARCH_CPU_64_BITS
@@ -219,6 +226,8 @@ union FloatContext {
     } fpregs[32];
     uint32_t fpcsr;
     uint32_t fpu_id;
+#elif defined(ARCH_CPU_LOONG64)
+    // Nothing.
 #else
 #error Port.
 #endif  // ARCH_CPU_X86_FAMILY
@@ -253,6 +262,10 @@ union FloatContext {
     double fpregs[32];
     uint32_t fpcsr;
     uint32_t fpu_id;
+#elif defined(ARCH_CPU_LOONG64)
+    uint64_t fregs[32];
+    uint32_t fcsr;
+    uint64_t fcc;
 #else
 #error Port.
 #endif  // ARCH_CPU_X86_FAMILY
@@ -280,7 +293,7 @@ union FloatContext {
 #endif
 #elif defined(ARCH_CPU_ARM64)
   static_assert(sizeof(f64) == sizeof(user_fpsimd_struct), "Size mismatch");
-#elif defined(ARCH_CPU_MIPS_FAMILY)
+#elif defined(ARCH_CPU_MIPS_FAMILY) || defined (ARCH_CPU_LOONG64)
 // No appropriate floating point context native type for available MIPS.
 #else
 #error Port.
diff --git a/third_party/crashpad/crashpad/util/misc/capture_context.h b/third_party/crashpad/crashpad/util/misc/capture_context.h
index a5503d682f8..668be84c23d 100644
--- a/third_party/crashpad/crashpad/util/misc/capture_context.h
+++ b/third_party/crashpad/crashpad/util/misc/capture_context.h
@@ -69,6 +69,7 @@ using NativeCPUContext = ucontext_t;
 //!     macOS/Linux/Fuchsia | x86_64       | `%%rdi`
 //!     Linux               | ARM/ARM64    | `r0`/`x0`
 //!     Linux               | MIPS/MIPS64  | `$a0`
+//!     Linux               | LOONGARCH64  | `$a0`
 //!
 //!     Additionally, the value `LR` on ARM/ARM64 will be the return address of
 //!     this function.
diff --git a/third_party/crashpad/crashpad/util/misc/capture_context_linux.S b/third_party/crashpad/crashpad/util/misc/capture_context_linux.S
index 9c3a7263815..58e9dba6a83 100644
--- a/third_party/crashpad/crashpad/util/misc/capture_context_linux.S
+++ b/third_party/crashpad/crashpad/util/misc/capture_context_linux.S
@@ -30,7 +30,7 @@
   .globl CAPTURECONTEXT_SYMBOL2
 #if defined(__i386__) || defined(__x86_64__)
   .balign 16, 0x90
-#elif defined(__arm__) || defined(__aarch64__)
+#elif defined(__arm__) || defined(__aarch64__) || defined(__loongarch64)
   .balign 4, 0x0
   .type CAPTURECONTEXT_SYMBOL, %function
   .type CAPTURECONTEXT_SYMBOL2, %function
@@ -427,4 +427,83 @@ CAPTURECONTEXT_SYMBOL2:
   jr $ra
 
   .set at
+#elif defined(__loongarch64)
+
+#define MCONTEXT_GREG_SIZE 8
+#define MCONTEXT_FPREG_SIZE 8
+#define MCONTEXT_PC_OFFSET 64
+#define MCONTEXT_GREGS_OFFSET 72
+#define MCONTEXT_FPREGS_OFFSET 352
+
+#define STORE_GPR(X) st.d $r##X, $a0, MCONTEXT_GREGS_OFFSET + X * MCONTEXT_GREG_SIZE
+#define STORE_FPR(X) fst.d $f##X, $a0, MCONTEXT_FPREGS_OFFSET + X * MCONTEXT_FPREG_SIZE
+#define STORE_PC st.d $ra, $a0, MCONTEXT_PC_OFFSET
+
+  STORE_PC
+  STORE_GPR(0)
+  STORE_GPR(1)
+  STORE_GPR(2)
+  STORE_GPR(3)
+  STORE_GPR(4)
+  STORE_GPR(5)
+  STORE_GPR(6)
+  STORE_GPR(7)
+  STORE_GPR(8)
+  STORE_GPR(9)
+  STORE_GPR(10)
+  STORE_GPR(11)
+  STORE_GPR(12)
+  STORE_GPR(13)
+  STORE_GPR(14)
+  STORE_GPR(15)
+  STORE_GPR(16)
+  STORE_GPR(17)
+  STORE_GPR(18)
+  STORE_GPR(19)
+  STORE_GPR(20)
+  STORE_GPR(21)
+  STORE_GPR(22)
+  STORE_GPR(23)
+  STORE_GPR(24)
+  STORE_GPR(25)
+  STORE_GPR(26)
+  STORE_GPR(27)
+  STORE_GPR(28)
+  STORE_GPR(29)
+  STORE_GPR(30)
+  STORE_GPR(31)
+  STORE_FPR(0)
+  STORE_FPR(1)
+  STORE_FPR(2)
+  STORE_FPR(3)
+  STORE_FPR(4)
+  STORE_FPR(5)
+  STORE_FPR(6)
+  STORE_FPR(7)
+  STORE_FPR(8)
+  STORE_FPR(9)
+  STORE_FPR(10)
+  STORE_FPR(11)
+  STORE_FPR(12)
+  STORE_FPR(13)
+  STORE_FPR(14)
+  STORE_FPR(15)
+  STORE_FPR(16)
+  STORE_FPR(17)
+  STORE_FPR(18)
+  STORE_FPR(19)
+  STORE_FPR(20)
+  STORE_FPR(21)
+  STORE_FPR(22)
+  STORE_FPR(23)
+  STORE_FPR(24)
+  STORE_FPR(25)
+  STORE_FPR(26)
+  STORE_FPR(27)
+  STORE_FPR(28)
+  STORE_FPR(29)
+  STORE_FPR(30)
+  STORE_FPR(31)
+
+  jirl $zero, $ra, 0
 #endif  // __i386__
diff --git a/third_party/crashpad/crashpad/util/misc/capture_context_test.cc b/third_party/crashpad/crashpad/util/misc/capture_context_test.cc
index f353aebe66b..ce45cb4887a 100644
--- a/third_party/crashpad/crashpad/util/misc/capture_context_test.cc
+++ b/third_party/crashpad/crashpad/util/misc/capture_context_test.cc
@@ -57,7 +57,7 @@ void TestCaptureContext() {
   uintptr_t pc = ProgramCounterFromContext(context_1);
 
 #if !defined(ADDRESS_SANITIZER) && !defined(ARCH_CPU_MIPS_FAMILY) && \
-    !defined(MEMORY_SANITIZER)
+    !defined(MEMORY_SANITIZER) && !defined(ARCH_CPU_LOONG64)
   // Sanitizers can cause enough code bloat that the “nearby” check would
   // likely fail.
   const uintptr_t kReferencePC =
diff --git a/third_party/crashpad/crashpad/util/misc/capture_context_test_util_linux.cc b/third_party/crashpad/crashpad/util/misc/capture_context_test_util_linux.cc
index 35751bf8b21..d454bbd4400 100644
--- a/third_party/crashpad/crashpad/util/misc/capture_context_test_util_linux.cc
+++ b/third_party/crashpad/crashpad/util/misc/capture_context_test_util_linux.cc
@@ -35,6 +35,8 @@ void SanityCheckContext(const NativeCPUContext& context) {
   EXPECT_EQ(context.uc_mcontext.regs[0], FromPointerCast<uintptr_t>(&context));
 #elif defined(ARCH_CPU_MIPS_FAMILY)
   EXPECT_EQ(context.uc_mcontext.gregs[4], FromPointerCast<uintptr_t>(&context));
+#elif defined(ARCH_CPU_LOONG64)
+  EXPECT_EQ(context.uc_mcontext.__gregs[4], FromPointerCast<uintptr_t>(&context));
 #endif
 }
 
@@ -49,6 +51,8 @@ uintptr_t ProgramCounterFromContext(const NativeCPUContext& context) {
   return context.uc_mcontext.pc;
 #elif defined(ARCH_CPU_MIPS_FAMILY)
   return context.uc_mcontext.pc;
+#elif defined(ARCH_CPU_LOONG64)
+  return context.uc_mcontext.__pc;
 #endif
 }
 
@@ -63,6 +67,8 @@ uintptr_t StackPointerFromContext(const NativeCPUContext& context) {
   return context.uc_mcontext.sp;
 #elif defined(ARCH_CPU_MIPS_FAMILY)
   return context.uc_mcontext.gregs[29];
+#elif defined(ARCH_CPU_LOONG64)
+  return context.uc_mcontext.__gregs[3];
 #endif
 }
 
diff --git a/third_party/crashpad/crashpad/util/net/http_transport_libcurl.cc b/third_party/crashpad/crashpad/util/net/http_transport_libcurl.cc
index d5c9177f952..c9ba39d9bb2 100644
--- a/third_party/crashpad/crashpad/util/net/http_transport_libcurl.cc
+++ b/third_party/crashpad/crashpad/util/net/http_transport_libcurl.cc
@@ -237,6 +237,8 @@ std::string UserAgent() {
 #elif defined(ARCH_CPU_BIG_ENDIAN)
     static constexpr char arch[] = "aarch64_be";
 #endif
+#elif defined(ARCH_CPU_LOONG64)
+    static constexpr char arch[] = "loongarch64";
 #else
 #error Port
 #endif
diff --git a/third_party/dawn/src/dawn/common/Platform.h b/third_party/dawn/src/dawn/common/Platform.h
index d0eeb779bf8..ddaf1ad0e3b 100644
--- a/third_party/dawn/src/dawn/common/Platform.h
+++ b/third_party/dawn/src/dawn/common/Platform.h
@@ -118,10 +118,10 @@
 
 #elif defined(__loongarch__)
 #define DAWN_PLATFORM_IS_LOONGARCH 1
-#if _LOONGARCH_SIM == _ABILP32
-#define DAWN_PLATFORM_IS_LOONGARCH32 1
-#else
+#if __loongarch_grlen == 64
 #define DAWN_PLATFORM_IS_LOONGARCH64 1
+#else
+#define DAWN_PLATFORM_IS_LOONGARCH32 1
 #endif
 
 #elif defined(__riscv)
diff --git a/third_party/ffmpeg/chromium/scripts/build_ffmpeg.py b/third_party/ffmpeg/chromium/scripts/build_ffmpeg.py
index 19d0a0f7bc1..f9dea0ad655 100755
--- a/third_party/ffmpeg/chromium/scripts/build_ffmpeg.py
+++ b/third_party/ffmpeg/chromium/scripts/build_ffmpeg.py
@@ -40,7 +40,8 @@ BRANDINGS = [
 ARCH_MAP = {
     'android': ['ia32', 'x64', 'arm-neon', 'arm64'],
     'linux': [
-        'ia32', 'x64', 'noasm-x64', 'arm', 'arm-neon', 'arm64'
+        #'ia32', 'x64', 'noasm-x64', 'arm', 'arm-neon', 'arm64'
+        'x64', 'loong64'
     ],
     'mac': ['x64', 'arm64'],
     'win': ['ia32', 'x64', 'arm64'],
@@ -136,6 +137,8 @@ def DetermineHostOsAndArch():
     host_arch = 'x64'
   elif platform.machine() == 'aarch64':
     host_arch = 'arm64'
+  elif platform.machine() == 'loongarch64':
+    host_arch = 'loong64'
   elif platform.machine() == 'mips32':
     host_arch = 'mipsel'
   elif platform.machine() == 'mips64':
@@ -911,6 +914,23 @@ def ConfigureAndBuild(target_arch, target_os, host_os, host_arch, parallel_jobs,
             '--extra-cflags=--target=mips64el-linux-gnuabi64',
             '--extra-ldflags=--target=mips64el-linux-gnuabi64',
         ])
+    elif target_arch == 'loong64':
+      if target_os == 'linux':
+        configure_flags['Common'].extend([
+            '--enable-cross-compile',
+            '--arch=loongarch64',
+            '--target-os=linux',
+            '--cc=' + os.path.join(
+                CHROMIUM_ROOT_DIR, 'third_party/llvm-build/Release+Asserts/bin/clang'),
+            '--cxx=' + os.path.join(
+                CHROMIUM_ROOT_DIR, 'third_party/llvm-build/Release+Asserts/bin/clang++'),
+            '--ld=' + os.path.join(
+                CHROMIUM_ROOT_DIR, 'third_party/llvm-build/Release+Asserts/bin/clang'),
+            '--sysroot=' + os.path.join(
+                CHROMIUM_ROOT_DIR, 'build/linux/debian_bullseye_loongarch64-sysroot'),
+            '--extra-cflags=--target=loongarch64-linux-gnu ',
+            '--extra-ldflags=--target=loongarch64-linux-gnu ',
+        ])
     else:
       print(
           'Error: Unknown target arch %r for target OS %r!' % (target_arch,
@@ -925,12 +945,15 @@ def ConfigureAndBuild(target_arch, target_os, host_os, host_arch, parallel_jobs,
     ])
 
   if 'win' not in target_os and 'android' not in target_os:
-    configure_flags['Common'].extend([
-        '--enable-pic',
-        '--cc=clang',
-        '--cxx=clang++',
-        '--ld=clang',
-    ])
+    if target_arch != 'loong64':
+      configure_flags['Common'].extend([
+          '--enable-pic',
+          '--cc=clang',
+          '--cxx=clang++',
+          '--ld=clang',
+      ])
+    else:
+      configure_flags['Common'].extend(['--enable-pic'])
 
     # Clang Linux will use the first 'ld' it finds on the path, which will
     # typically be the system one, so explicitly configure use of Clang's
diff --git a/third_party/ffmpeg/chromium/scripts/copy_config.sh b/third_party/ffmpeg/chromium/scripts/copy_config.sh
index a18048cf040..d8164515208 100755
--- a/third_party/ffmpeg/chromium/scripts/copy_config.sh
+++ b/third_party/ffmpeg/chromium/scripts/copy_config.sh
@@ -10,7 +10,7 @@ for os in android linux linux-noasm mac win; do
     # Copy config files for various architectures:
     #   - ia32/x64 have config.asm, config.h
     #   - arm/arm-neon have config.h
-    for arch in arm arm-neon arm64 ia32 x64 mipsel mips64el; do
+    for arch in arm arm-neon arm64 ia32 x64 mipsel mips64el loong64; do
       # Don't waste time on non-existent configs, if no config.h then skip.
       [ ! -e "build.$arch.$os/$target/config.h" ] && continue
       for f in config.h config_components.h config.asm libavutil/avconfig.h libavutil/ffversion.h libavcodec/bsf_list.c libavcodec/codec_list.c libavcodec/parser_list.c libavformat/demuxer_list.c libavformat/muxer_list.c libavformat/protocol_list.c; do
diff --git a/third_party/ffmpeg/chromium/scripts/generate_gn.py b/third_party/ffmpeg/chromium/scripts/generate_gn.py
index d36b0a22c3c..3ba01794468 100755
--- a/third_party/ffmpeg/chromium/scripts/generate_gn.py
+++ b/third_party/ffmpeg/chromium/scripts/generate_gn.py
@@ -78,7 +78,7 @@ _Attrs = ('ARCHITECTURE', 'TARGET', 'PLATFORM')
 Attr = collections.namedtuple('Attr', _Attrs)(*_Attrs)
 SUPPORT_MATRIX = {
     Attr.ARCHITECTURE:
-        set(['ia32', 'x64', 'arm', 'arm64', 'arm-neon']),
+        set(['ia32', 'x64', 'arm', 'arm64', 'arm-neon', 'loong64']),
     Attr.TARGET:
         set(['Chromium', 'Chrome', 'ChromeOS']),
     Attr.PLATFORM:
diff --git a/third_party/libvpx/BUILD.gn b/third_party/libvpx/BUILD.gn
index c5aad48a48d..ff23740efb7 100644
--- a/third_party/libvpx/BUILD.gn
+++ b/third_party/libvpx/BUILD.gn
@@ -452,9 +452,10 @@ static_library("libvpx") {
   if (current_cpu == "arm" && arm_assembly_sources != []) {
     deps += [ ":libvpx_assembly_arm" ]
   }
-  if (current_cpu == "loong64") {
-    deps += [ ":libvpx_loongarch_lsx" ]
-  }
+  # Community compiler currently does not support vector.
+  #if (current_cpu == "loong64") {
+  #  deps += [ ":libvpx_loongarch_lsx" ]
+  #}
 
   public_configs = [ ":libvpx_external_config" ]
 }
diff --git a/third_party/libvpx/source/config/linux/loongarch/vp8_rtcd.h b/third_party/libvpx/source/config/linux/loongarch/vp8_rtcd.h
index 7a23f15f226..f053925d323 100644
--- a/third_party/libvpx/source/config/linux/loongarch/vp8_rtcd.h
+++ b/third_party/libvpx/source/config/linux/loongarch/vp8_rtcd.h
@@ -473,6 +473,7 @@ static void setup_rtcd_internal(void) {
   int flags = loongarch_cpu_caps();
 
   (void)flags;
+#if 0
   vp8_block_error = vp8_block_error_c;
   if (flags & HAS_LSX)
     vp8_block_error = vp8_block_error_lsx;
@@ -521,6 +522,7 @@ static void setup_rtcd_internal(void) {
   vp8_sixtap_predict8x8 = vp8_sixtap_predict8x8_c;
   if (flags & HAS_LSX)
     vp8_sixtap_predict8x8 = vp8_sixtap_predict8x8_lsx;
+#endif
 }
 #endif
 
diff --git a/third_party/libvpx/source/config/linux/loongarch/vpx_dsp_rtcd.h b/third_party/libvpx/source/config/linux/loongarch/vpx_dsp_rtcd.h
index f4740a1ddb2..2548fd8139b 100644
--- a/third_party/libvpx/source/config/linux/loongarch/vpx_dsp_rtcd.h
+++ b/third_party/libvpx/source/config/linux/loongarch/vpx_dsp_rtcd.h
@@ -2113,6 +2113,7 @@ static void setup_rtcd_internal(void) {
   int flags = loongarch_cpu_caps();
 
   (void)flags;
+#if 0
   vpx_comp_avg_pred = vpx_comp_avg_pred_c;
   if (flags & HAS_LSX)
     vpx_comp_avg_pred = vpx_comp_avg_pred_lsx;
@@ -2284,6 +2285,7 @@ static void setup_rtcd_internal(void) {
   vpx_variance8x8 = vpx_variance8x8_c;
   if (flags & HAS_LSX)
     vpx_variance8x8 = vpx_variance8x8_lsx;
+#endif
 }
 #endif
 
diff --git a/third_party/swiftshader/third_party/llvm-10.0/BUILD.gn b/third_party/swiftshader/third_party/llvm-10.0/BUILD.gn
index 59e52303c5c..313fcd1831d 100644
--- a/third_party/swiftshader/third_party/llvm-10.0/BUILD.gn
+++ b/third_party/swiftshader/third_party/llvm-10.0/BUILD.gn
@@ -158,6 +158,8 @@ swiftshader_llvm_source_set("swiftshader_llvm") {
     deps += [ ":swiftshader_llvm_riscv64" ]
   } else if (current_cpu == "x86" || current_cpu == "x64") {
     deps += [ ":swiftshader_llvm_x86" ]
+  } else if (current_cpu == "loong64") {
+    # TODO: Add support.
   } else {
     assert(false, "Unsupported current_cpu")
   }
-- 
2.25.1

